{{- /* The line below tells Intellij/GoLand to enable the autocompletion based on the *gen.Graph type. */ -}}
{{- /* gotype: entgo.io/ent/entc/gen.Graph */ -}}
{{- define "entrefine-auth" -}}

{{ template "header" $ }}

import (
	"context"
	"errors"
	"fmt"
	"github.com/diazoxide/entrefine"
	"github.com/diazoxide/entrefine/common"
)
{{- $auth := $.Config.Annotations.ENTREFINE.Auth }}
{{ if (indirect $auth.Enabled) }}
func EntrefineAuthMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var err error

		{{- if (indirect $auth.Keycloak.Enabled) }}
		kc := entrefine.NewBackendKeycloak(
			"{{$auth.Keycloak.Host}}",
			"{{$auth.Keycloak.Realm}}",
			"{{$auth.Keycloak.BackendClientConfig.ClientID}}",
			"{{$auth.Keycloak.BackendClientConfig.Secret}}",
		)
		r, err = kc.MiddlewareReqHandlerFunc(w, r)
		{{- end }}

		if err == nil {
			next.ServeHTTP(w, r)
		}
	})
}

func EntrefineAuthGinMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		var err error

		{{- if (indirect $auth.Keycloak.Enabled) }}
		kc := entrefine.NewBackendKeycloak(
			"{{$auth.Keycloak.Host}}",
			"{{$auth.Keycloak.Realm}}",
			"{{$auth.Keycloak.BackendClientConfig.ClientID}}",
			"{{$auth.Keycloak.BackendClientConfig.Secret}}",
		)
		c.Request, err = kc.MiddlewareReqHandlerFunc(c.Writer, c.Request)
		{{- end }}

		if err == nil {
			c.Next()
		} else {
			c.Abort()
		}
	}
}

func AuthorizeByResource(ctx context.Context, resource string, scope string) error {
	resource = entrefine.PrepareName("{{$.Annotations.ENTREFINE.Prefix}}", resource)
	scope = entrefine.PrepareName("{{$.Annotations.ENTREFINE.Prefix}}", scope)
	authContext, err := AuthContextFromRequestContext(ctx)
	if err != nil {
		return err
	}
	auth := false
	for _, p := range authContext.Permissions {
		if p.Resource == resource {
			if common.Contains(p.Scopes, scope) {
				auth = true
				break
			}
		}
	}
	if !auth {
		return errors.New("access restricted for " + resource + " " + scope)
	}

	return nil
}

func AuthContextFromRequestContext(ctx context.Context) (*entrefine.AuthContext, error) {
	val := ctx.Value(entrefine.AuthContextKey)
	if val == nil {
		err := fmt.Errorf("could not retrieve AuthContext")
		return nil, err
	}

	raw, ok := val.(*entrefine.AuthContext)
	if !ok {
		return nil, fmt.Errorf("could not convert AuthContext")
	}
	return raw, nil
}

{{- end }}
{{- end }}