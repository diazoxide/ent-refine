{{- /* The line below tells Intellij/GoLand to enable the autocompletion based on the *gen.Graph type. */ -}}
{{- /* gotype: entgo.io/ent/entc/gen.Graph */ -}}
{{- define "entkit-auth" -}}

{{ template "header" $ }}

import (
	"context"
	"errors"
	"fmt"
	"github.com/entkit/entkit"
)
{{- $auth := $.Config.Annotations.ENTKIT.Auth }}
{{- $prefix := $.Annotations.ENTKIT.Prefix}}
// _entkitDefaultValue to provide default values from entc definition and also get ability to provide from caller
func _entkitDefaultValue(value string, defaultValue string) string {
	if value == "" {
	return defaultValue
	}
	return value
}

func EntkitAuthMiddleware(
	next http.Handler,
	{{- template "helper/entkit-middleware-additional-params" $ }}
) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		{{- if (indirect $auth.Enabled)}}
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Access-Control-Allow-Methods", "POST, GET")
		w.Header().Set("Access-Control-Allow-Headers", "Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization")
		var err error
		{{- if (indirect $auth.Keycloak.Enabled) }}
		kc := entkit.NewBackendKeycloak(
			_entkitDefaultValue(keycloakHost, "{{$auth.Keycloak.Host}}"),
			_entkitDefaultValue(keycloakRealm, "{{$auth.Keycloak.Realm}}"),
			_entkitDefaultValue(keycloakBackendClientID, "{{$auth.Keycloak.BackendClientConfig.ClientID}}"),
			_entkitDefaultValue(keycloakBackendClientSecret, "{{$auth.Keycloak.BackendClientConfig.Secret}}"),
		)
		r, err = kc.MiddlewareReqHandlerFunc(w, r)
		{{- end }}
		if err == nil {
			next.ServeHTTP(w, r)
		}
		{{- else }}
		fmt.Println("Entkit: Authentication/Authorization is currently disabled. To utilize EntkitAuthMiddleware, please enable this feature.")
		next.ServeHTTP(w, r)
		{{- end }}
	})
}

func EntkitAuthGinMiddleware(
{{- template "helper/entkit-middleware-additional-params" $ }}
) gin.HandlerFunc {
	return func(c *gin.Context) {
		{{- if (indirect $auth.Enabled)}}
		c.Header("Access-Control-Allow-Origin", "*")
		c.Header("Access-Control-Allow-Methods", "POST, GET")
		c.Header("Access-Control-Allow-Headers", "Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization")
		var err error
		{{- if (indirect $auth.Keycloak.Enabled) }}
		kc := entkit.NewBackendKeycloak(
			"{{$auth.Keycloak.Host}}",
			"{{$auth.Keycloak.Realm}}",
			"{{$auth.Keycloak.BackendClientConfig.ClientID}}",
			"{{$auth.Keycloak.BackendClientConfig.Secret}}",
		)
		c.Request, err = kc.MiddlewareReqHandlerFunc(c.Writer, c.Request)
		{{- end }}
		if err == nil {
			c.Next()
		} else {
			c.Abort()
		}
		{{- else }}
		fmt.Println("Entkit: Authentication/Authorization is currently disabled. To utilize EntkitAuthGinMiddleware, please enable this feature.")
		c.Next()
		{{- end }}
	}
}

type {{$prefix}}Resource int
const (
	{{- range $i, $n := $.Nodes }}
	{{ $n.Name | ER_prepareName }}Resource{{- if eq $i 0 }} {{$prefix}}Resource = iota {{- end}}
	{{- end }}
)
func (e {{$prefix}}Resource) String() string {
    switch e {
	{{- range $i, $n := $.Nodes }}
	case {{ $n.Name | ER_prepareName }}Resource:
		return "{{ $n.Name | ER_prepareName }}"
	{{- end }}
    default:
        return "unknown"
    }
}

type {{$prefix}}Scope int
{{- $scopes := list }}
{{- range $n := $.Nodes }}
{{- range $action := $n.Annotations.ENTKIT.Actions }}
{{- $scope := indirect $action.Scope}}
{{- $scopes = append $scopes $scope }}
{{- end }}
{{- end }}
{{- $scopes = $scopes | uniq}}
const (
	{{- range $i, $scope := $scopes }}
	{{ $scope | ER_prepareName }}Scope{{- if eq $i 0 }} {{$prefix}}Scope = iota {{- end }}
	{{- end }}
)
func (e {{$prefix}}Scope) String() string {
    switch e {
	{{- range $i, $s := $scopes }}
	case {{ $s | ER_prepareName }}Scope:
		return "{{ $s | ER_prepareName }}"
	{{- end }}
    default:
        return "unknown"
    }
}


func EntkitAuthorizeByResource(ctx context.Context, resource {{$prefix}}Resource, scope {{$prefix}}Scope) error {
	{{- if (indirect $auth.Keycloak.Enabled) }}
	authContext, err := EntkitAuthContextFromRequestContext(ctx)
	if err != nil {
		return err
	}
	auth := false
	for _, p := range authContext.Permissions {
		if p.Resource == resource.String() {
			for _, _scope := range p.Scopes{
				if _scope == scope.String() {
					auth = true
					break
				}
			}
		}
	}
	if !auth {
		return errors.New("access restricted for " + resource.String() + " " + scope.String())
	}
	{{- else }}
	fmt.Println("Entkit: Authentication/Authorization is currently disabled. To utilize EntkitAuthorizeByResource, please enable this feature.")
	{{- end }}
	return nil
}

func EntkitAuthContextFromRequestContext(ctx context.Context) (*entkit.AuthContext, error) {
	{{- if (indirect $auth.Keycloak.Enabled) }}
	val := ctx.Value(entkit.AuthContextKey)
	if val == nil {
		err := fmt.Errorf("could not retrieve AuthContext")
		return nil, err
	}

	raw, ok := val.(*entkit.AuthContext)
	if !ok {
		return nil, fmt.Errorf("could not convert AuthContext")
	}
	return raw, nil
	{{- else }}
	fmt.Println("Entkit: Authentication/Authorization is currently disabled. To utilize EntkitAuthContextFromRequestContext, please enable this feature.")
	return nil, nil
	{{- end }}
}

{{- end }}

{{- /* gotype: entgo.io/ent/entc/gen.Graph */ -}}
{{- define "helper/entkit-middleware-additional-params" -}}
{{- $auth := $.Config.Annotations.ENTKIT.Auth }}
{{- if and (indirect $auth.Enabled) (indirect $auth.Keycloak.Enabled) }}
	keycloakHost string,
	keycloakRealm string,
	keycloakBackendClientID string,
	keycloakBackendClientSecret string,
{{- end }}
{{- end -}}