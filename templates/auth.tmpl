{{- /* The line below tells Intellij/GoLand to enable the autocompletion based on the *gen.Graph type. */ -}}
{{- /* gotype: entgo.io/ent/entc/gen.Graph */ -}}
{{- define "entkit-auth" -}}

{{ template "header" $ }}

import (
	"context"
	"errors"
	"fmt"
	"github.com/entkit/entkit"
	"github.com/entkit/entkit/common"
)
{{- $auth := $.Config.Annotations.ENTKIT.Auth }}

func EntkitAuthMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		{{- if (indirect $auth.Enabled)}}
		var err error
		{{- if (indirect $auth.Keycloak.Enabled) }}
		kc := entkit.NewBackendKeycloak(
			"{{$auth.Keycloak.Host}}",
			"{{$auth.Keycloak.Realm}}",
			"{{$auth.Keycloak.BackendClientConfig.ClientID}}",
			"{{$auth.Keycloak.BackendClientConfig.Secret}}",
		)
		r, err = kc.MiddlewareReqHandlerFunc(w, r)
		{{- end }}
		if err == nil {
			next.ServeHTTP(w, r)
		}
		{{- else }}
		fmt.Println("Entkit: Authentication/Authorization is currently disabled. To utilize EntkitAuthMiddleware, please enable this feature.")
		next.ServeHTTP(w, r)
		{{- end }}
	})
}

func EntkitAuthGinMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		{{- if (indirect $auth.Enabled)}}
		var err error
		{{- if (indirect $auth.Keycloak.Enabled) }}
		kc := entkit.NewBackendKeycloak(
			"{{$auth.Keycloak.Host}}",
			"{{$auth.Keycloak.Realm}}",
			"{{$auth.Keycloak.BackendClientConfig.ClientID}}",
			"{{$auth.Keycloak.BackendClientConfig.Secret}}",
		)
		c.Request, err = kc.MiddlewareReqHandlerFunc(c.Writer, c.Request)
		{{- end }}
		if err == nil {
			c.Next()
		} else {
			c.Abort()
		}
		{{- else }}
		fmt.Println("Entkit: Authentication/Authorization is currently disabled. To utilize EntkitAuthGinMiddleware, please enable this feature.")
		c.Next()
		{{- end }}
	}
}

func EntkitAuthorizeByResource(ctx context.Context, resource string, scope string) error {
	{{- if (indirect $auth.Keycloak.Enabled) }}
	resource = entkit.PrepareName("{{$.Annotations.ENTKIT.Prefix}}", resource)
	scope = entkit.PrepareName("{{$.Annotations.ENTKIT.Prefix}}", scope)
	authContext, err := EntkitAuthContextFromRequestContext(ctx)
	if err != nil {
		return err
	}
	auth := false
	for _, p := range authContext.Permissions {
		if p.Resource == resource {
			if common.Contains(p.Scopes, scope) {
				auth = true
				break
			}
		}
	}
	if !auth {
		return errors.New("access restricted for " + resource + " " + scope)
	}
	{{- else }}
	fmt.Println("Entkit: Authentication/Authorization is currently disabled. To utilize EntkitAuthorizeByResource, please enable this feature.")
	{{- end }}
	return nil
}

func EntkitAuthContextFromRequestContext(ctx context.Context) (*entkit.AuthContext, error) {
	{{- if (indirect $auth.Keycloak.Enabled) }}
	val := ctx.Value(entkit.AuthContextKey)
	if val == nil {
		err := fmt.Errorf("could not retrieve AuthContext")
		return nil, err
	}

	raw, ok := val.(*entkit.AuthContext)
	if !ok {
		return nil, fmt.Errorf("could not convert AuthContext")
	}
	return raw, nil
	{{- else }}
	fmt.Println("Entkit: Authentication/Authorization is currently disabled. To utilize EntkitAuthContextFromRequestContext, please enable this feature.")
	return nil, nil
	{{- end }}
}

{{- end }}