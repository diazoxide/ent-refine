// Copyright 2019-present Facebook
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package company

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the company type in the database.
	Label = "company"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLogo holds the string denoting the logo field in the database.
	FieldLogo = "logo"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeCountries holds the string denoting the countries edge name in mutations.
	EdgeCountries = "countries"
	// EdgePhones holds the string denoting the phones edge name in mutations.
	EdgePhones = "phones"
	// EdgeEmails holds the string denoting the emails edge name in mutations.
	EdgeEmails = "emails"
	// EdgeWebsites holds the string denoting the websites edge name in mutations.
	EdgeWebsites = "websites"
	// EdgeLocations holds the string denoting the locations edge name in mutations.
	EdgeLocations = "locations"
	// EdgeLogoImage holds the string denoting the logo_image edge name in mutations.
	EdgeLogoImage = "logo_image"
	// EdgeCoverImage holds the string denoting the cover_image edge name in mutations.
	EdgeCoverImage = "cover_image"
	// EdgeGalleryImages holds the string denoting the gallery_images edge name in mutations.
	EdgeGalleryImages = "gallery_images"
	// Table holds the table name of the company in the database.
	Table = "companies"
	// CountriesTable is the table that holds the countries relation/edge. The primary key declared below.
	CountriesTable = "company_countries"
	// CountriesInverseTable is the table name for the Country entity.
	// It exists in this package in order to avoid circular dependency with the "country" package.
	CountriesInverseTable = "countries"
	// PhonesTable is the table that holds the phones relation/edge.
	PhonesTable = "phones"
	// PhonesInverseTable is the table name for the Phone entity.
	// It exists in this package in order to avoid circular dependency with the "phone" package.
	PhonesInverseTable = "phones"
	// PhonesColumn is the table column denoting the phones relation/edge.
	PhonesColumn = "company_phones"
	// EmailsTable is the table that holds the emails relation/edge.
	EmailsTable = "emails"
	// EmailsInverseTable is the table name for the Email entity.
	// It exists in this package in order to avoid circular dependency with the "email" package.
	EmailsInverseTable = "emails"
	// EmailsColumn is the table column denoting the emails relation/edge.
	EmailsColumn = "company_emails"
	// WebsitesTable is the table that holds the websites relation/edge.
	WebsitesTable = "websites"
	// WebsitesInverseTable is the table name for the Website entity.
	// It exists in this package in order to avoid circular dependency with the "website" package.
	WebsitesInverseTable = "websites"
	// WebsitesColumn is the table column denoting the websites relation/edge.
	WebsitesColumn = "company_websites"
	// LocationsTable is the table that holds the locations relation/edge.
	LocationsTable = "locations"
	// LocationsInverseTable is the table name for the Location entity.
	// It exists in this package in order to avoid circular dependency with the "location" package.
	LocationsInverseTable = "locations"
	// LocationsColumn is the table column denoting the locations relation/edge.
	LocationsColumn = "company_locations"
	// LogoImageTable is the table that holds the logo_image relation/edge.
	LogoImageTable = "images"
	// LogoImageInverseTable is the table name for the Image entity.
	// It exists in this package in order to avoid circular dependency with the "image" package.
	LogoImageInverseTable = "images"
	// LogoImageColumn is the table column denoting the logo_image relation/edge.
	LogoImageColumn = "company_logo_image"
	// CoverImageTable is the table that holds the cover_image relation/edge.
	CoverImageTable = "images"
	// CoverImageInverseTable is the table name for the Image entity.
	// It exists in this package in order to avoid circular dependency with the "image" package.
	CoverImageInverseTable = "images"
	// CoverImageColumn is the table column denoting the cover_image relation/edge.
	CoverImageColumn = "company_cover_image"
	// GalleryImagesTable is the table that holds the gallery_images relation/edge.
	GalleryImagesTable = "images"
	// GalleryImagesInverseTable is the table name for the Image entity.
	// It exists in this package in order to avoid circular dependency with the "image" package.
	GalleryImagesInverseTable = "images"
	// GalleryImagesColumn is the table column denoting the gallery_images relation/edge.
	GalleryImagesColumn = "company_gallery_images"
)

// Columns holds all SQL columns for company fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldLogo,
	FieldDescription,
}

var (
	// CountriesPrimaryKey and CountriesColumn2 are the table columns denoting the
	// primary key for the countries relation (M2M).
	CountriesPrimaryKey = []string{"company_id", "country_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// LogoValidator is a validator for the "logo" field. It is called by the builders before save.
	LogoValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
