// Copyright 2019-present Facebook
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package product

import (
	"fmt"

	"github.com/99designs/gqlgen/graphql"
	"github.com/diazoxide/ent-refine/examples/ent-project/ent/enums"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the product type in the database.
	Label = "product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldLastSell holds the string denoting the last_sell field in the database.
	FieldLastSell = "last_sell"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldBuildStatus holds the string denoting the build_status field in the database.
	FieldBuildStatus = "build_status"
	// EdgeCompany holds the string denoting the company edge name in mutations.
	EdgeCompany = "company"
	// EdgeWarehouse holds the string denoting the warehouse edge name in mutations.
	EdgeWarehouse = "warehouse"
	// EdgeVendor holds the string denoting the vendor edge name in mutations.
	EdgeVendor = "vendor"
	// Table holds the table name of the product in the database.
	Table = "products"
	// CompanyTable is the table that holds the company relation/edge.
	CompanyTable = "companies"
	// CompanyInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	CompanyInverseTable = "companies"
	// CompanyColumn is the table column denoting the company relation/edge.
	CompanyColumn = "product_company"
	// WarehouseTable is the table that holds the warehouse relation/edge.
	WarehouseTable = "products"
	// WarehouseInverseTable is the table name for the Warehouse entity.
	// It exists in this package in order to avoid circular dependency with the "warehouse" package.
	WarehouseInverseTable = "warehouses"
	// WarehouseColumn is the table column denoting the warehouse relation/edge.
	WarehouseColumn = "warehouse_products"
	// VendorTable is the table that holds the vendor relation/edge.
	VendorTable = "products"
	// VendorInverseTable is the table name for the Vendor entity.
	// It exists in this package in order to avoid circular dependency with the "vendor" package.
	VendorInverseTable = "vendors"
	// VendorColumn is the table column denoting the vendor relation/edge.
	VendorColumn = "vendor_products"
)

// Columns holds all SQL columns for product fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldDescription,
	FieldImage,
	FieldURL,
	FieldLastSell,
	FieldCreatedAt,
	FieldStatus,
	FieldBuildStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "products"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"vendor_products",
	"warehouse_products",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// ImageValidator is a validator for the "image" field. It is called by the builders before save.
	ImageValidator func(string) error
	// URLValidator is a validator for the "url" field. It is called by the builders before save.
	URLValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

const DefaultStatus enums.ProcessStatus = "none"

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s enums.ProcessStatus) error {
	switch s {
	case "none", "done", "enqueued", "in_progress", "failed":
		return nil
	default:
		return fmt.Errorf("product: invalid enum value for status field: %q", s)
	}
}

const DefaultBuildStatus enums.ProcessStatus = "none"

// BuildStatusValidator is a validator for the "build_status" field enum values. It is called by the builders before save.
func BuildStatusValidator(bs enums.ProcessStatus) error {
	switch bs {
	case "none", "done", "enqueued", "in_progress", "failed":
		return nil
	default:
		return fmt.Errorf("product: invalid enum value for build_status field: %q", bs)
	}
}

var (
	// enums.ProcessStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.ProcessStatus)(nil)
	// enums.ProcessStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.ProcessStatus)(nil)
)

var (
	// enums.ProcessStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.ProcessStatus)(nil)
	// enums.ProcessStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.ProcessStatus)(nil)
)
