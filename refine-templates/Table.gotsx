{{- /* gotype: github.com/diazoxide/ent-refine.RefineGen */ -}}
{{- define "tables.tsx" -}}

import React, {useState} from "react";
import {IResourceComponentsProps, HttpError} from "@pankod/refine-core";
import * as RA from "@pankod/refine-antd";
import * as Interfaces from "./interfaces";
import { Cursors } from "./data-provider";
import * as Custom from "./custom";
import * as FieldView from "./field-view";

{{ range $n := $.Graph.Nodes }}
{{- $orderFields := orderFields $n }}
export const {{$n.Name}}Table :React.FC<IResourceComponentsProps & {extendTable?: RA.useTableProps<Interfaces.I{{$n.Name}}, HttpError>}> = ( props ) => {

    const [cursors, setCursors] = useState<Cursors>({
        first: 10,
    })

    const [perPage, setPerPage] = useState<number>(10)

    {{- $allFields := prepend $n.Fields $n.ID }}
    const table = RA.useTable<Interfaces.I{{$n.Name}}>({
        resource: "{{$n.Name}}",
        initialSorter: [
            {
                field: "{{ (first $orderFields).Name }}",
                order: "asc",
            },
        ],
        initialFilter: [
            {{ range $f := $allFields }}
            {{- if not $f.Annotations.REFINE.HideOnList -}}
            {
                field: "{{$f.Name | camel }}",
                value: null,
                operator: "{{ lower (default "EQ" $f.Annotations.REFINE.FilterOperator) }}",
            },
            {{- end -}}
            {{- end -}}
        ],
        metaData: {
            fields: [
                "{{ $n.ID.Name }}",
                {{- range $f :=  $n.Fields}}
                "{{ $f.Name | camel }}",
                {{- end}}
            ],
            cursors,
        },
        hasPagination: true,
        ...props.extendTable,
    });

    const data = table.tableQueryResult.data as any

    return (
        <>
            <RA.Table {...table.tableProps} pagination={false} rowKey="id">
                {{- range $f := $allFields }}
                {{- if not $f.Annotations.REFINE.HideOnList }}
                <RA.Table.Column
                    dataIndex="{{ camel $f.Name }}"
                    title="{{ $f.Name | label }}"
                    {{- if has $f $orderFields }}
                    sorter={
                        {}
                    }
                    {{- end }}
                    render={ (value)=> {
                        {{- $viewName := ( print "FieldView." (ER_fieldTSType $f) "ViewOnList" ) }}
                        {{- if not (empty $f.Annotations.REFINE.FieldViewOnList) }}
                        {{ $viewName = print "Custom." $f.Annotations.REFINE.FieldViewOnList }}
                        {{- end}}
                        return <{{$viewName}} value={ value } />
                    } }
                    filterDropdown={(props) => (
                        <RA.FilterDropdown {...props}>
                            {{- if $f.IsEnum }}
                            <RA.Select
                                options={[
                                    {{- range $v := $f.EnumValues }}
                                    {
                                        value: "{{$v}}",
                                        label: "{{$v}}",
                                    },
                                    {{- end }}
                                ]}
                                style={ { width: '100%', minWidth: "100px" } }
                            />
                            {{- else }}
                            <RA.Input />
                            {{- end}}
                        </RA.FilterDropdown>
                    )}
                    defaultSortOrder={RA.getDefaultSortOrder("{{ $f.Name }}", table.sorter)}
                />
                {{- end }}
                {{- end }}
                <RA.Table.Column<Interfaces.I{{ $n.Name }}>
                    title="Actions"
                    dataIndex="actions"
                    render={(_, record) => (
                        <RA.Space>
                            {{- range $a := $n.Annotations.REFINE.ListActions }}
                            <{{ $a.Name }}
                                hideText={true}
                                resource="{{$n.Name}}"
                                resourceNameOrRouteName="{{$n.Name}}"
                                size="small"
                                recordItemId={record.id}
                            />
                            {{- end }}
                        </RA.Space>
                    )}
                />
            </RA.Table>

            <RA.Space style={ {marginTop: 20} }>
                <RA.Typography.Text type="secondary">Total {data?.total || 0}</RA.Typography.Text>
                <RA.Button
                    disabled={!Boolean(data?.pageInfo?.hasPreviousPage)}
                    onClick={() => {
                        setCursors((ov)=>({
                            ...ov,
                            before: data?.pageInfo?.startCursor,
                            last: perPage,
                            after: undefined,
                            first: undefined,
                        }))
                    }
                    }>
                    <RA.Icons.LeftOutlined/>
                    Prev
                </RA.Button>
                <RA.Button
                    disabled={!Boolean(data?.pageInfo?.hasNextPage)}
                    onClick={() => {
                        setCursors((ov)=>{
                            return {
                                ...ov,
                                after: data?.pageInfo?.endCursor,
                                first: perPage,
                                before: undefined,
                                last: undefined,
                            }
                        })
                    }}>
                    Next
                    <RA.Icons.RightOutlined/>
                </RA.Button>
                <RA.Select
                    labelInValue
                    defaultValue={ { value: 10, label: '10 / page' } }
                    style={ { width: 110 } }
                    onChange={(value)=>{
                        setPerPage(value.value)
                        setCursors((ov)=>({
                            ...ov,
                            // Return to first page
                            first: value.value,
                            last: undefined,
                            before: undefined,
                            after: undefined,
                        }))
                    }}
                    options={[
                        {value: 10, label: '10 / page'},
                        {value: 20, label: '20 / page'},
                        {value: 50, label: '50 / page'},
                        {value: 100, label: '100 / page'},
                    ]}
                />
            </RA.Space>
        </>
    );
};
{{- end -}}
{{- end -}}
