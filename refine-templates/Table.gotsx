{{- /* gotype: github.com/entkit/entkit.UI */ -}}

{{- define "src/tables.tsx" -}}
import React, {useState} from "react";
import {HttpError} from "@refinedev/core";
import * as RA from "@refinedev/antd";
import * as Antd from "antd";
import * as AntdIcons from "@ant-design/icons";
import * as Interfaces from "./typedefs";
import { Cursors } from "./data-provider";
import * as Custom from "./custom";
import * as View from "./view";
import * as Action from "./action";

{{ range $n := $.Graph.Nodes }}
{{- $orderFields := orderFields $n }}
export type {{$n.Name}}TableProps = Antd.TableProps<Interfaces.{{ER_prepareName $n.Name}}Interface> & { extendTable?: RA.useTableProps<Interfaces.{{ ER_prepareName $n.Name }}Interface, HttpError> }
export const {{$n.Name}}Table :React.FC<{{$n.Name}}TableProps> = ({extendTable, ...props} ) => {

    const [cursors, setCursors] = useState<Cursors>({first: 10,})
    const [perPage, setPerPage] = useState<number>(10)

    {{- $allFields := prepend $n.Fields $n.ID }}
    const table = RA.useTable<Interfaces.{{ER_prepareName $n.Name}}Interface>({
        resource: "{{$n.Name | kebabcase}}",
        initialSorter: [
            {
                field: "{{ (first $orderFields).Name }}",
                order: "asc",
            },
        ],
        initialFilter: [
            {{ range $f := $allFields }}
            {{- if not $f.Annotations.ENTKIT.HideOnList -}}
            {
                field: "{{$f.Name | camel }}",
                value: null,
                operator: "{{ lower (default "EQ" $f.Annotations.ENTKIT.FilterOperator) }}",
            },
            {{- end -}}
            {{- end -}}
        ],
        metaData: {
            fields: [
                {{- range $f :=  $allFields}}
                "{{ $f.Name | camel }}",
                {{- end }}
                {{- range $e :=  $n.Edges}}
                {{- $edgeAllFields := prepend $e.Type.Fields $e.Type.ID }}
                {{- $titleField := (ER_titleField $e.Type) }}
                {{- if $e.Unique }}
                {
                    "{{ $e.Name | camel }}": [
                        {{- range $f :=  $edgeAllFields}}
                        "{{ $f.Name | camel }}",
                        {{- end }}
                    ]
                },
                {{- else }}
                {"{{ $e.Name | camel }}": [
                    /*{
                        edges: [
                            {
                                node: [
                                    {{- range $f :=  $edgeAllFields}}
                                    "{{ $f.Name | camel }}",
                                    {{- end }}
                                ]
                            },
                        ],
                    },*/
                    "totalCount",
                ]},
                {{- end}}
                {{- end}}
            ],
            cursors,
        },
        hasPagination: true,
        ...extendTable,
    });

    const data = table.tableQueryResult.data as any

    return (
        <>
            <Antd.Table {...table.tableProps} pagination={false} rowKey="{{$n.ID.Name}}" {...props}>
                { /* region Fields */ }
                {{- range $f := $allFields }}
                {{- if not $f.Annotations.ENTKIT.HideOnList }}
                <Antd.Table.Column
                    dataIndex="{{ camel $f.Name }}"
                    title="{{ $f.Name | ER_label }}"
                    {{- if has $f $orderFields }}
                    sorter={
                        {}
                    }
                    {{- end }}
                    render={ (value)=> {
                        {{- $viewName := ( print "View." (ER_fieldTSType $f) "ViewOnList" ) }}
                        {{- if not (empty $f.Annotations.ENTKIT.ViewOnList) }}
                        {{ $viewName = print "Custom." $f.Annotations.ENTKIT.ViewOnList }}
                        {{- end}}
                        return <{{$viewName}} value={ value } />
                    } }
                    filterDropdown={(props) => (
                        <RA.FilterDropdown {...props}>
                            {{- if $f.IsEnum }}
                            <Antd.Select
                                options={[
                                    {{- range $v := $f.EnumValues }}
                                    {
                                        value: "{{$v}}",
                                        label: "{{$v}}",
                                    },
                                    {{- end }}
                                ]}
                                style={ { width: '100%', minWidth: "100px" } }
                            />
                            {{- else }}
                            <Antd.Input />
                            {{- end}}
                        </RA.FilterDropdown>
                    )}
                    defaultSortOrder={RA.getDefaultSortOrder("{{ $f.Name }}", table.sorter)}
                />
                {{- end }}
                {{- end }}
                {/* endregion */}

                { /* region Edges */ }
                {{- range $e := $n.Edges }}
                {{- if not $e.Annotations.ENTKIT.HideOnList }}
                {{- $titleField := (ER_titleField $e.Type) }}
                <Antd.Table.Column
                    dataIndex="{{ camel $e.Name }}"
                    title="{{ $e.Name | ER_label }}"
                    render={
                        {{- if $e.Unique }}
                        {{- $viewName := ( print "View." $e.Type.Name "Badge" ) }}
                        {{- if not (empty $e.Annotations.ENTKIT.Badge) }}
                        {{ $viewName = print "Custom." $e.Annotations.ENTKIT.Badge }}
                        {{- end}}
                        (value)=>(<{{$viewName}} { ...value } />)
                        {{- else }}
                        (value)=><span>{ value?.totalCount || "No" } Items</span>
                        {{- end }}
                    }
                />

                {{- end }}
                {{- end }}
                {/* endregion Edges*/}

                <Antd.Table.Column<Interfaces.{{ ER_prepareName $n.Name }}Interface>
                    title="Actions"
                    dataIndex="actions"
                    render={(_, record) => (
                        <Antd.Space>
                            {{- range $a := $n.Annotations.ENTKIT.Actions }}
                            {{- if and (not $a.General) $a.OnList }}
                            <Action.{{ ( print $n.Name "-" $a.Name "-Action") | pascal }}
                                recordItemIDs={ [record.id] }
                                size="small"
                                hideText={true}
                            />
                            {{- end }}
                            {{- end }}
                        </Antd.Space>
                    )}
                />
            </Antd.Table>

            <Antd.Space style={ {marginTop: 20} }>
                <Antd.Typography.Text type="secondary">Total {data?.total || 0}</Antd.Typography.Text>
                <Antd.Button
                    disabled={!Boolean(data?.pageInfo?.hasPreviousPage)}
                    onClick={() => {
                        setCursors((ov)=>({
                            ...ov,
                            before: data?.pageInfo?.startCursor,
                            last: perPage,
                            after: undefined,
                            first: undefined,
                        }))
                    }
                    }>
                    <AntdIcons.LeftOutlined/>
                    Prev
                </Antd.Button>
                <Antd.Button
                    disabled={!Boolean(data?.pageInfo?.hasNextPage)}
                    onClick={() => {
                        setCursors((ov)=>{
                            return {
                                ...ov,
                                after: data?.pageInfo?.endCursor,
                                first: perPage,
                                before: undefined,
                                last: undefined,
                            }
                        })
                    }}>
                    Next
                    <AntdIcons.RightOutlined/>
                </Antd.Button>
                <Antd.Select
                    labelInValue
                    defaultValue={ { value: 10, label: '10 / page' } }
                    style={ { width: 110 } }
                    onChange={(value)=>{
                        setPerPage(value.value)
                        setCursors((ov)=>({
                            ...ov,
                            // Return to first page
                            first: value.value,
                            last: undefined,
                            before: undefined,
                            after: undefined,
                        }))
                    }}
                    options={[
                        {value: 10, label: '10 / page'},
                        {value: 20, label: '20 / page'},
                        {value: 50, label: '50 / page'},
                        {value: 100, label: '100 / page'},
                    ]}
                />
            </Antd.Space>
        </>
    );
};
{{- end -}}
{{- end -}}
