{{- /* gotype: github.com/diazoxide/ent-refine.RefineGen */ -}}
{{- define "show.tsx" -}}
import { useShow, useOne } from "@pankod/refine-core";
import * as RA  from "@pankod/refine-antd";
import RefineReactRouter from "@pankod/refine-react-router-v6";
import * as Tables from "./tables";
import * as Lists from "./list";
import * as Interfaces from "./interfaces";
import * as FieldView from "./field-view";
import * as Custom from "./custom";

const { Link } = RefineReactRouter;

{{ range $n := $.Graph.Nodes -}}

export const {{$n.Name}}Show = () => {
    const { queryResult } = useShow<Interfaces.I{{$n.Name}}>({
        resource: "{{ $n.Name }}",
        metaData: {
            fields: [
                "{{ $n.ID.Name }}",
                {{- range $f :=  $n.Fields }}
                "{{ $f.Name | camel }}",
                {{- end -}}

                {{- range $e := $n.EdgesWithID }}
                {{- if $e.Unique }}
                {
                    "{{ camel $e.Name }}": [ "id", "{{ (ER_titleField $e.Type).Name }}" ]
                },
                {{- else }}
                {
                    "{{ camel $e.Name }}": [
                        {
                            edges: [
                                {
                                    node: [ "id", "{{ (ER_titleField $e.Type).Name }}" ],
                                }
                            ]
                        }
                    ]
                },
                {{- end }}
                {{- end }}
            ],
        },
    });

    const { data, isLoading } = queryResult;
    const record = data?.data

    {{ $allFields := prepend $n.Fields $n.ID}}
    return (
        <RA.Show isLoading={isLoading}>
            {{- range $f := $allFields}}
            <RA.Typography.Title level={5}>{{ $f.Name | ER_label }}</RA.Typography.Title>
            {{- $viewName := ( print "FieldView." (ER_fieldTSType $f) "ViewOnShow" ) }}
            {{- if not (empty $f.Annotations.REFINE.FieldViewOnShow) }}
            {{ $viewName = print "Custom." $f.Annotations.REFINE.FieldViewOnShow }}
            {{- end}}
            <{{$viewName}} value={ record?.{{ camel $f.Name }} } />
            {{- end }}

            <RA.Typography.Title level={3}>Edges</RA.Typography.Title>
            <RA.Descriptions>
                {{- range $e := $n.EdgesWithID }}
                {{- $titleField := (ER_titleField $e.Type) }}
                {{- if $e.Unique }}
                <RA.Descriptions.Item label="{{ $e.Name | ER_label }}">
                    <Link key={ "{{$e.Name}}-" + record?.{{ camel $e.Name }}?.id + "-link"} to={ "/{{$e.Type.Name}}/show/"+ record?.{{ camel $e.Name }}?.id}>
                        { record?.{{ camel $e.Name }}?.{{camel $titleField.Name}} }
                    </Link>
                </RA.Descriptions.Item>
                {{- end}}
                {{- end}}
            </RA.Descriptions>

            <RA.Tabs
                defaultActiveKey="0"
                items={[
                    {{- range $i, $e := $n.EdgesWithID }}
                    {{- if not (isNil $e.Ref) }}
                    {{- if not $e.Unique }}
                    {{- $titleField := (ER_titleField $e.Type) }}
                    {{- $filterOperator := print "has" (pascal $e.Ref.Name) "With" }}
                    {
                        label: <span>
                            <RA.Icons.{{default "FileOutlined" $e.Type.Annotations.REFINE.Icon}} />
                            {{$e.Name | ER_label}}
                        </span>,
                        key: "{{$i}}",
                        children: <Lists.{{$e.Type.Name}}List
                            key={ "{{$e.Name}}-{{ plural $e.Ref.Name}}" }
                            breadcrumb={ false }
                            tableProps={ {
                                extendTable: {
                                    permanentFilter: [
                                        { operator: "{{$filterOperator}}" as any, field: "", value: {id: record?.id} }
                                    ]
                                }
                            }
                            }
                        />
                    },
                    {{- end }}
                    {{- end }}
                    {{- end }}
                ]}
            />
        </RA.Show>
    );
};

{{- end -}}
{{- end -}}
