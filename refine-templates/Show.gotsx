{{- /* gotype: github.com/entkit/entkit.RefineGen */ -}}

{{- define "src/show.tsx" -}}
import React, { useState } from "react";
import { useShow } from "@refinedev/core";
import * as RA from "@refinedev/antd";
import * as Antd from "antd";
import * as AntdIcons from "@ant-design/icons";

import * as Lists from "./list";
import * as Diagram from "./diagram";
import * as Interfaces from "./interfaces";
import * as View from "./view";
import * as Custom from "./custom";
import * as Action from "./action";

{{- range $n := $.Graph.Nodes -}}
{{- $titleField := (ER_titleField $n) }}
{{- $allFields := prepend $n.Fields $n.ID }}

export type {{$n.Name}}ShowProps = {
    id?: Interfaces.{{$.Prefix}}ID,
    withEdges?: boolean,
} & RA.ShowProps
export const {{$n.Name}}Show : React.FC<{{$n.Name}}ShowProps> = ({id, withEdges, ...showProps}) => {
    const { queryResult } = useShow<Interfaces.I{{$n.Name}}>({
        resource: "{{ $n.Name | kebabcase }}",
        id,
        metaData: {
            fields: [
                {{- range $f :=  $allFields }}
                "{{ $f.Name | camel }}",
                {{- end -}}

                {{- range $e := $n.EdgesWithID }}
                {{- $edgeAllFields := prepend $e.Type.Fields $e.Type.ID }}
                {{- if $e.Unique }}
                {
                    "{{ camel $e.Name }}": [
                        {{- range $f :=  $edgeAllFields}}
                        "{{ $f.Name | camel }}",
                        {{- end }}
                    ]
                },
                {{- else }}
                {
                    operation: "{{ $e.Name | camel }}",
                    fields: [
                        {
                            edges: [
                                {
                                    node: [
                                        {{- range $f :=  $edgeAllFields}}
                                        "{{ $f.Name | camel }}",
                                        {{- end }}
                                    ]
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10
                    }
                },
                {{- end }}
                {{- end }}
            ],
        },
    });

    const { data, isLoading } = queryResult;
    const record = data?.data

    const [edgesDiagram, setEdgesDiagram] = useState(false)

    if(!record){
        return <></>
    }

    const nodes: Array<Diagram.Node|undefined> =  [
            {
                id: record.{{$n.ID.Name}},
                label: record.{{$n.ID.Name}},
                {{/*color: "#dddddd"*/}}
            },
            {{- range $e := $n.EdgesWithID }}
            {{- $titleField := (ER_titleField $e.Type) }}
            {{- if $e.Unique }}
            record.{{ camel $e.Name }} ? {
                id: record.{{ camel $e.Name }}.id || "n/a",
                label: record.{{ camel $e.Name }}.id ||"n/a",
            } : undefined,
            {{- else }}
            ...(record.{{ camel $e.Name }} || []).map((i)=>{
                return {
                    id: i.{{$e.Type.ID.Name}},
                    label: i.{{$e.Type.ID.Name}},
                }
            }),
            Number(record._{{ camel $e.Name }}?.totalCount) > Number(record.{{ camel $e.Name }}?.length)
                ? {
                    id: "{{ $e.Type.Name }}_more",
                    label: `More ${Number(record._{{ camel $e.Name }}?.totalCount) - Number(record.{{ camel $e.Name }}?.length)}`
                }
                : undefined,
            {{- end }}
            {{- end }}
        ];
    const links:Array<Diagram.Link|undefined> = [
            {{- range $e := $n.EdgesWithID }}
            {{- if $e.Unique }}
            record.{{ camel $e.Name }} ? {
                source: record.{{$n.ID.Name}},
                target: record.{{ camel $e.Name }}?.id || "n/a",
                label: "{{ ER_label $e.Name }}"
            } : undefined,
            {{- else }}
            ...(record.{{ camel $e.Name }} || []).map((i)=>{
                return {
                    source: record.{{$n.ID.Name}},
                    target: i.{{$e.Type.ID.Name}},
                    label: "{{ER_label $e.Name }}"
                }
            }),
            Number(record._{{ camel $e.Name }}?.totalCount) > Number(record.{{ camel $e.Name }}?.length)
            ? {
                source: record.{{$n.ID.Name}},
                target: "{{$e.Type.Name}}_more",
                label: "{{ER_label $e.Name }}"
            }
            : undefined,
            {{- end }}
            {{- end }}
        ]

    return (
        <RA.Show isLoading={isLoading}
                 headerButtons={({ defaultButtons }) => (
                     <>
                     {{/*{defaultButtons}*/}}
                     <Antd.Button icon={<AntdIcons.ClusterOutlined />} type="primary" onClick={ ()=>{ setEdgesDiagram(!edgesDiagram) } }>Edges Diagram</Antd.Button>
                     {{- range $a := $n.Annotations.ENTKIT.Actions }}
                     {{ if $a.OnShow }}
                     <Action.{{ ( print $n.Name "-" $a.Name "-Action") | pascal }} recordItemIDs={ [record.id] }/>
                     {{- end }}
                     {{- end }}
                     </>
                 )}
                 {...showProps}
        >
            {!edgesDiagram ? <>
                {{- range $f := $allFields}}
                <Antd.Typography.Title level={5}>{{ $f.Name | ER_label }}</Antd.Typography.Title>
                {{- $viewName := ( print "View." (ER_fieldTSType $f) "ViewOnShow" ) }}
                {{- if not (empty $f.Annotations.ENTKIT.ViewOnShow) }}
                {{ $viewName = print "Custom." $f.Annotations.ENTKIT.ViewOnShow }}
                {{- end}}
                <{{$viewName}} value={ record?.{{ camel $f.Name }} } />
                {{- end }}

                {withEdges ? <>
                    <Antd.Typography.Title level={3}>Edges</Antd.Typography.Title>
                    <Antd.Descriptions>
                        {{- range $e := $n.EdgesWithID }}
                        {{- $titleField := (ER_titleField $e.Type) }}
                        {{- $viewName := ( print "View." $e.Type.Name "Badge" ) }}
                        {{- if not (empty $e.Annotations.ENTKIT.Badge) }}
                        {{ $viewName = print "Custom." $e.Annotations.ENTKIT.Badge }}
                        {{- end}}
                        {{- if $e.Unique }}
                        <Antd.Descriptions.Item label="{{ $e.Name | ER_label }}">
                            <{{$viewName}} { ...record?.{{ camel $e.Name }} } />
                        </Antd.Descriptions.Item>
                        {{- end}}
                        {{- end}}
                    </Antd.Descriptions>
                    <Antd.Tabs
                    defaultActiveKey="0"
                    items={[
                        {{- range $i, $e := $n.EdgesWithID }}
                        {{- if not (isNil $e.Ref) }}
                        {{- if not $e.Unique }}
                        {{- $titleField := (ER_titleField $e.Type) }}
                        {{- $filterOperator := print "has" (pascal $e.Ref.Name) "With" }}
                        {
                            label: <span>
                                <AntdIcons.{{default "FileOutlined" $e.Type.Annotations.ENTKIT.Icon}} />
                                {{$e.Name | ER_label}}
                            </span>,
                            key: "{{$i}}",
                            children: <Lists.{{$e.Type.Name}}List
                                key={ "{{$e.Name}}-{{ plural $e.Ref.Name}}" }
                                breadcrumb={ false }
                                tableProps={ {
                                    extendTable: {
                                        permanentFilter: [
                                            { operator: "{{$filterOperator}}" as any, field: "", value: {id: record?.id} }
                                        ]
                                    }
                                }
                                }
                            />
                        },
                        {{- end }}
                        {{- end }}
                        {{- end }}
                    ]}
                />

                </> : null }
            </> : null }

            { edgesDiagram ?
                {{- $diagramView := default $.Extension.DefaultEdgesDiagram $n.Annotations.ENTKIT.EdgesDiagram }}
                <{{$diagramView}}
                    nodes={ nodes.filter((n): n is Diagram.Node => typeof n !== "undefined") }
                    links={ links.filter((n): n is Diagram.Link => typeof n !== "undefined") }
                />
            : null }

        </RA.Show>
    )
}

export const {{$n.Name}}MainShow : React.FC = () => {
    return <{{$n.Name}}Show withEdges={true}/>
};

export const {{$n.Name}}PartialShow : React.FC = () => {
    return <{{$n.Name}}Show withEdges={false}/>
};

{{- end -}}

{{- end -}}
