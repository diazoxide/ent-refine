{{- /* gotype: github.com/entkit/entkit/v2.Generator */ -}}

{{- define "src/show.tsx" -}}
{{- $.Extension.FileHeader | ER_replace "^" "//" }}

{{- $prefix := $.Extension.Prefix }}
import React, { useState } from "react";
import { useShow } from "@refinedev/core";
import * as RA from "@refinedev/antd";
import * as Antd from "antd";
import * as AntdIcons from "@ant-design/icons";

import * as Lists from "./list";
import * as Diagram from "./diagram";
import * as Interfaces from "./typedefs";
import * as View from "./view";
import * as Custom from "./custom";
import * as Action from "./action";

{{- range $n := $.Graph.Nodes -}}
{{- $ant := ER_nodeConfig $n }}
{{- $titleField := (ER_titleField $n) }}
{{- $allFields := prepend $n.Fields $n.ID }}

export type {{$n.Name}}ShowProps = {
    id?: Interfaces.{{$prefix}}ID,
    withEdges?: boolean,
} & RA.ShowProps
export const {{$n.Name}}Show : React.FC<{{ $n.Name }}ShowProps> = ({id, withEdges, ...showProps}) => {
    const { queryResult } = useShow<Interfaces.{{ ER_prepareName $n.Name }}Interface>({
        resource: "{{ $n.Name | kebabcase }}",
        id,
        metaData: {
            fields: [
                {{- range $f :=  $allFields }}
                "{{ $f.Name | camel }}",
                {{- end -}}

                {{- range $e := $n.EdgesWithID }}
                {{- $edgeAllFields := prepend $e.Type.Fields $e.Type.ID }}
                {{- if $e.Unique }}
                {
                    "{{ camel $e.Name }}": [
                        {{- range $f :=  $edgeAllFields}}
                        "{{ $f.Name | camel }}",
                        {{- end }}
                    ]
                },
                {{- else }}
                {
                    operation: "{{ $e.Name | camel }}",
                    fields: [
                        {
                            edges: [
                                {
                                    node: [
                                        {{- range $f :=  $edgeAllFields}}
                                        "{{ $f.Name | camel }}",
                                        {{- end }}
                                    ]
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10
                    }
                },
                {{- end }}
                {{- end }}
            ],
        },
    });

    const { data, isLoading } = queryResult;
    const record = data?.data

    if(!record){
        return <></>
    }

    return (
        <RA.Show
            isLoading={isLoading}
            headerButtons={() => (
                 <>
                 {{- range $a := $ant.Actions }}
                 {{- if has "show" $a.DisplayOn }}
                 <Action.{{ ( print $n.Name "-" (indirect $a.Name) "-Action") | pascal }} recordItemIDs={ [record.id] }/>
                 {{- end }}
                 {{- end }}
                 </>
            )}
            {...showProps}
        >

            {{- range $f := $allFields}}
            {{- $fAnts := ER_fieldConfig $f}}
            <Antd.Typography.Title level={5}>{{ $f.Name | ER_label }}</Antd.Typography.Title>
            {{- $viewName := ( print "View." (ER_fieldTSType $f) "ViewOnShow" ) }}
            {{- if not (isNil $fAnts.ViewOnShow) }}
            {{ $viewName = print "Custom." (indirect $fAnts.ViewOnShow) }}
            {{- end}}
            <{{$viewName}} value={ record?.{{ camel $f.Name }} } />
            {{- end }}

            {withEdges ? <>
                <Antd.Typography.Title level={3}>Edges</Antd.Typography.Title>
                <Antd.Descriptions>
                    {{- range $e := $n.EdgesWithID }}
                    {{- $eAnts := ER_edgeConfig $e}}
                    {{- $titleField := (ER_titleField $e.Type) }}
                    {{- $viewName := ( print "View." $e.Type.Name "Badge" ) }}
                    {{- if not (empty $eAnts.Badge) }}
                    {{ $viewName = print "Custom." $eAnts.Badge }}
                    {{- end}}
                    {{- if $e.Unique }}
                    <Antd.Descriptions.Item label="{{ $e.Name | ER_label }}">
                        <{{$viewName}} { ...record?.{{ camel $e.Name }} } />
                    </Antd.Descriptions.Item>
                    {{- end}}
                    {{- end}}
                </Antd.Descriptions>
                <Antd.Tabs
                    defaultActiveKey="0"
                    items={[
                        {{- range $i, $e := $n.EdgesWithID }}
                        {{- $enAnts := ER_nodeConfig $e.Type}}
                        {{- if not (isNil $e.Ref) }}
                        {{- if not $e.Unique }}
                        {{- $titleField := (ER_titleField $e.Type) }}
                        {{- $filterOperator := print "has" (pascal $e.Ref.Name) "With" }}
                        {
                            label: <span>
                                <AntdIcons.{{default "FileOutlined" $enAnts.Icon}} />
                                {{$e.Name | ER_label}}
                            </span>,
                            key: "{{$i}}",
                            children: <Lists.{{$e.Type.Name}}List
                                key={ "{{$e.Name}}-{{ plural $e.Ref.Name}}" }
                                breadcrumb={ false }
                                tableProps={ {
                                    extendTable: {
                                        permanentFilter: [
                                            { operator: "{{$filterOperator}}" as any, field: "", value: {id: record?.id} }
                                        ]
                                    }
                                }
                                }
                            />
                        },
                        {{- end }}
                        {{- end }}
                        {{- end }}
                    ]}
                />

            </> : null }

        </RA.Show>
    )
}

export const {{$n.Name}}MainShow : React.FC = () => {
    return <{{$n.Name}}Show withEdges={true}/>
};

export const {{$n.Name}}PartialShow : React.FC = () => {
    return <{{$n.Name}}Show withEdges={false}/>
};

{{- end -}}

{{- end -}}
