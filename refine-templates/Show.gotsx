{{- /* gotype: github.com/diazoxide/ent-refine.RefineGen */ -}}
{{- define "show.tsx" -}}
import { useShow, useOne } from "@pankod/refine-core";
import * as RA  from "@pankod/refine-antd";
import RefineReactRouter from "@pankod/refine-react-router-v6";
import * as Tables from "./tables";

const { Link } = RefineReactRouter;

{{- range $n := $.Graph.Nodes -}}

export const {{$n.Name}}Show = () => {
    const { queryResult } = useShow({
        resource: "{{ $n.Name }}",
        metaData: {
            fields: [
                "{{ $n.ID.Name }}",
                {{- range $f :=  $n.Fields }}
                "{{ $f.Name | camel }}",
                {{- end -}}

                {{- range $e := $n.EdgesWithID }}
                {{- if $e.Unique }}
                {
                    "{{ camel $e.Name }}": [ "id", "{{ (ER_titleField $e.Type).Name }}" ]
                },
                {{- else }}
                {
                    "{{ camel $e.Name }}": [
                        {
                            edges: [
                                {
                                    node: [ "id", "{{ (ER_titleField $e.Type).Name }}" ],
                                }
                            ]
                        }
                    ]
                },
                {{- end }}
                {{- end }}
            ],
        },
    });

    const { data, isLoading } = queryResult;
    const record = data?.data

    {{ $allFields := prepend $n.Fields $n.ID}}
    return (
        <RA.Show isLoading={isLoading}>
            {{- range $f := $allFields}}
            <RA.Typography.Title level={5}>{{ $f.Name | label }}</RA.Typography.Title>
            {{- if eq $f.Type.String "time.Time" -}}
            {record?.{{ camel $f.Name }} ? <RA.DateField format="LLL" value={ record?.{{ camel $f.Name }} }/> : <RA.TextField value="Never"/>}
            {{- else if eq $f.Type.String "uuid.UUID" -}}
            <RA.Typography.Text copyable={true}>{ record?.{{ camel $f.Name }} }</RA.Typography.Text>
            {{- else if eq $f.Type.String "bool" -}}
            <RA.TextField value={record?.{{ camel $f.Name }}  ? "Yes" : "No"}/>
            {{- else -}}
            {{- if $f.Annotations.REFINE.ImageField }}
            <RA.Image width={128} src={record?.{{ camel $f.Name }} }/>
            {{- else if $f.Annotations.REFINE.URLField }}
            <RA.Button type="primary" href={record?.{{ camel $f.Name }} } target="_blank" icon={<RA.Icons.LinkOutlined/>}>{ record?.{{ camel $f.Name }} }</RA.Button>
            {{- else }}
            <RA.Typography.Text copyable={true}>{record?.{{ camel $f.Name }}}</RA.Typography.Text>
            {{- end }}
            {{- end }}
            {{- end }}

            <RA.Typography.Title level={3}>Edges</RA.Typography.Title>
            <RA.Descriptions>
                {{- range $e := $n.EdgesWithID }}
                {{- $titleField := (ER_titleField $e.Type) }}
                {{- if $e.Unique }}
                <RA.Descriptions.Item label="{{ $e.Name | label }}">
                    <Link key={ "{{$e.Name}}-" + record?.{{ camel $e.Name }}?.id + "-link"} to={ "/{{$e.Type.Name}}/show/"+ record?.{{ camel $e.Name }}?.id}>
                        { record?.{{ camel $e.Name }}?.{{camel $titleField.Name}} }
                    </Link>
                </RA.Descriptions.Item>
                {{- end}}
                {{- end}}
            </RA.Descriptions>

            <RA.Row gutter={[16,32]}>
                {{- range $e := $n.EdgesWithID }}
                {{- if not $e.Unique }}
                <RA.Col span={12}>
                    {{- $titleField := (ER_titleField $e.Type) }}
                    <RA.Typography.Title key={ "{{$e.Name}}-label" } level={5}>
                        <RA.Space size={8}>
                            <RA.Icons.{{default "ApartmentOutlined" $e.Type.Annotations.REFINE.Icon}}/>
                            {{ $e.Name | label }}
                        </RA.Space>
                    </RA.Typography.Title>

                    {{- $filterOperator := print "has" (pascal $e.Ref.Name) "With" }}
                    <Tables.{{$e.Type.Name}}Table key={ "{{$e.Name}}-" + record?.{{ camel $e.Name }}?.id + "-link"} extendTable={ {permanentFilter: [{operator: "{{$filterOperator}}" as any, field: "", value: {id: record?.id}}]} }></Tables.{{$e.Type.Name}}Table>
                </RA.Col>
                {{- end }}
                {{- end }}
            </RA.Row>
        </RA.Show>
    );
};

{{- end -}}
{{- end -}}
