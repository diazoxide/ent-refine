import {useState} from "react";
{{- /* gotype: github.com/diazoxide/ent-refine.RefineGen */ -}}
{{- define "show.tsx" -}}
import { useState } from "react";
import {BaseKey} from "@pankod/refine-core/dist/interfaces";
import { useShow, useOne } from "@pankod/refine-core";
import * as RA  from "@pankod/refine-antd";
import RefineReactRouter from "@pankod/refine-react-router-v6";
import {Canvas, Label, Node, Edge} from "reaflow";

import * as Tables from "./tables";
import * as Lists from "./list";
import * as Interfaces from "./interfaces";
import * as FieldView from "./field-view";
import * as Custom from "./custom";
import * as Badge  from "./badge";

const { Link } = RefineReactRouter;

{{ range $n := $.Graph.Nodes -}}
{{- $titleField := (ER_titleField $n) }}

export type {{$n.Name}}ShowProps = {
    id?: BaseKey,
    withEdges?: boolean,
} & RA.ShowProps
export const {{$n.Name}}Show : React.FC<{{$n.Name}}ShowProps> = ({id, withEdges, ...showProps}) => {
    const { queryResult } = useShow<Interfaces.I{{$n.Name}}>({
        resource: "{{ $n.Name }}",
        id,
        metaData: {
            fields: [
                "{{ $n.ID.Name }}",
                {{- range $f :=  $n.Fields }}
                "{{ $f.Name | camel }}",
                {{- end -}}

                {{- range $e := $n.EdgesWithID }}
                {{- if $e.Unique }}
                {
                    "{{ camel $e.Name }}": [ "id", "{{ (ER_titleField $e.Type).Name }}" ]
                },
                {{- else }}
                {
                    "{{ camel $e.Name }}": [
                        {
                            edges: [
                                {
                                    node: [ "id", "{{ (ER_titleField $e.Type).Name }}" ],
                                }
                            ]
                        }
                    ]
                },
                {{- end }}
                {{- end }}
            ],
        },
    });

    const { data, isLoading } = queryResult;
    const record = data?.data

    const [idTreeView, setIdTreeView] = useState(false)

    if(!record){
        return <></>
    }

    type nodeType = {id: string; text: string, data: Record<string, any>}
    type edgeType = {id: string, from: string, to: string, text: string}
    const nodes: Array<nodeType|undefined> = [
        {
            id: record.{{$n.ID.Name}},
            text: record.{{$n.ID.Name}},
            data: {
                title: record.{{$titleField.Name}}
            }
        },
        {{- range $e := $n.EdgesWithID }}
        {{- $titleField := (ER_titleField $e.Type) }}
        {{- if $e.Unique }}
        record.{{ camel $e.Name }} ? {
            id: record.{{ camel $e.Name }}.id || "n/a",
            text: record.{{ camel $e.Name }}.id ||"n/a",
            data: {
                title: record.{{ camel $e.Name }}.{{$titleField.Name}}
            }
        } : undefined,
        {{- else }}
        ...(record.{{ camel $e.Name }} || []).map((i)=>{
            return {
                id: i.{{$e.Type.ID.Name}},
                text: i.{{$e.Type.ID.Name}},
                data: {
                    title: i.{{$titleField.Name}}
                }
            }
        }),
        {{- end }}
        {{- end }}
    ]
    const edges: Array<edgeType|undefined> = [
        {{- range $e := $n.EdgesWithID }}
        {{- if $e.Unique }}
        record.{{ camel $e.Name }} ? {
            id: record.{{$n.ID.Name}}+"-"+(record.{{ camel $e.Name }}?.id || "n/a"),
            from: record.{{$n.ID.Name}},
            to: record.{{ camel $e.Name }}?.id || "n/a",
            text: "{{ ER_label $e.Name }}"
        } : undefined,
        {{- else }}
        ...(record.{{ camel $e.Name }} || []).map((i)=>{
           return {
               id: record.{{$n.ID.Name}}+"-"+i.{{$e.Type.ID.Name}},
               from: record.{{$n.ID.Name}},
               to: i.{{$e.Type.ID.Name}},
               text: "{{ER_label $e.Name }}"
           }
        }),
        {{- end }}
        {{- end }}
    ]


    {{ $allFields := prepend $n.Fields $n.ID}}
    return (
        <RA.Show isLoading={isLoading}
                 headerButtons={({ defaultButtons }) => (
                     <>
                     {defaultButtons}
                     <RA.Button icon={<RA.Icons.ClusterOutlined />} type="primary" onClick={ ()=>{ setIdTreeView(!idTreeView) } }>ID tree</RA.Button>
                     </>
                 )}
                 {...showProps}
        >
            {!idTreeView ? <>
                {{- range $f := $allFields}}
                <RA.Typography.Title level={5}>{{ $f.Name | ER_label }}</RA.Typography.Title>
                {{- $viewName := ( print "FieldView." (ER_fieldTSType $f) "ViewOnShow" ) }}
                {{- if not (empty $f.Annotations.REFINE.FieldViewOnShow) }}
                {{ $viewName = print "Custom." $f.Annotations.REFINE.FieldViewOnShow }}
                {{- end}}
                <{{$viewName}} value={ record?.{{ camel $f.Name }} } />
                {{- end }}

                {withEdges ? <>
                    <RA.Typography.Title level={3}>Edges</RA.Typography.Title>
                    <RA.Descriptions>
                        {{- range $e := $n.EdgesWithID }}
                        {{- $titleField := (ER_titleField $e.Type) }}
                        {{- if $e.Unique }}
                        <RA.Descriptions.Item label="{{ $e.Name | ER_label }}">
                            <Badge.{{$e.Type.Name}}Badge id={ record?.{{ camel $e.Name }}?.id } title={ record?.{{ camel $e.Name }}?.{{camel $titleField.Name}} }/>
                        </RA.Descriptions.Item>
                        {{- end}}
                        {{- end}}
                    </RA.Descriptions>
                    <RA.Tabs
                    defaultActiveKey="0"
                    items={[
                        {{- range $i, $e := $n.EdgesWithID }}
                        {{- if not (isNil $e.Ref) }}
                        {{- if not $e.Unique }}
                        {{- $titleField := (ER_titleField $e.Type) }}
                        {{- $filterOperator := print "has" (pascal $e.Ref.Name) "With" }}
                        {
                            label: <span>
                                <RA.Icons.{{default "FileOutlined" $e.Type.Annotations.REFINE.Icon}} />
                                {{$e.Name | ER_label}}
                            </span>,
                            key: "{{$i}}",
                            children: <Lists.{{$e.Type.Name}}List
                                key={ "{{$e.Name}}-{{ plural $e.Ref.Name}}" }
                                breadcrumb={ false }
                                tableProps={ {
                                    extendTable: {
                                        permanentFilter: [
                                            { operator: "{{$filterOperator}}" as any, field: "", value: {id: record?.id} }
                                        ]
                                    }
                                }
                                }
                            />
                        },
                        {{- end }}
                        {{- end }}
                        {{- end }}
                    ]}
                />

                </> : null }
            </> : null }

            {idTreeView ? <Canvas
                height={600}
                pannable={true}
                nodes={nodes.filter((n): n is nodeType => typeof n !== "undefined")}
                edges={edges.filter((e): e is edgeType => typeof e !== "undefined")}

                node={<Node
                    style={ { stroke: '#000000', fill: '#001628', strokeWidth: 1 } }
                    label={ <Label style={ { fill: '#ffffff' } } /> }
                >{event => (
                    <span>{event.node.data.title}</span>
                )}</Node>}
                edge={<Edge label={<Label style={ { fill: 'black' } } />}></Edge>}
            /> : null}

        </RA.Show>
    );
};

{{- end -}}
{{- end -}}
