{{- /* gotype: github.com/diazoxide/ent-refine.RefineGen */ -}}
{{- define "create.tsx" -}}

import {useState} from 'react';
import * as RA from '@pankod/refine-antd';
import dayjs from 'dayjs';
import * as Interfaces from './interfaces';
import {Cursors} from './data-provider';
import CodeEditor from '@uiw/react-textarea-code-editor';
import * as FieldView from "./field-view";
import * as Custom from "./custom";

import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';

{{- range $n := $.Graph.Nodes -}}
export const {{$n.Name}}Create: React.FC = () => {
    const {formProps, saveButtonProps, queryResult} = RA.useForm<Interfaces.I{{$n.Name}}>();

    {{- range $ed := $n.EdgesWithID}}
    const [{{$ed.Name}}Cursors, set{{pascal $ed.Name}}Cursors] = useState<Cursors>({
        first: 10,
    })
    {{- $titleField := $ed.Type.ID}}
    {{- range $f:=$ed.Type.Fields }}
    {{- if $f.Annotations.REFINE.TitleField }}
    {{- $titleField = $f }}
    {{- end }}

    {{- end}}
    const {selectProps: {{$ed.Name}}SelectProps} = RA.useSelect<Interfaces.I{{$n.Name}}>({
        resource: "{{ $ed.Type.Name }}",
        optionLabel: "{{$titleField.Name}}",
        optionValue: "id",
        metaData: {
            cursors: {{$ed.Name}}Cursors,
            fields: ["id", "{{$titleField.Name}}"]
        },
        onSearch: (value) => [
            {
                field: "{{$titleField.Name}}",
                {{- $operator := "contains" }}
                operator: "{{$operator}}",
                value,
            },
        ],
    });
    {{- end}}
    return (
        <RA.Create saveButtonProps={saveButtonProps}>
            <RA.Form {...formProps} layout="vertical">
                {{- range $f := $n.Fields}}
                {{if not (isSkipMode $f.Annotations.EntGQL.Skip "mutation_create_input" ) }}
                <RA.Form.Item
                    label="{{ $f.Name | label }}"
                    name="{{ camel $f.Name }}"
                    rules={[{required: {{ not $f.Optional }}}]}
                    {{- if $f.IsTime }}
                    getValueProps={(value) => ({
                        value: value ? dayjs(value) : "",
                    })}
                    {{- end }}
                >
                    {{- $viewName := ( print "FieldView." (ER_fieldTSType $f) "ViewOnForm" ) }}
                    {{- if not (empty $f.Annotations.REFINE.FieldViewOnForm) }}
                    {{ $viewName = print "Custom." $f.Annotations.REFINE.FieldViewOnForm }}
                    {{- end}}
                     <{{$viewName}}/>
                </RA.Form.Item>
                {{- end -}}
                {{- end -}}
                {{- range $edge := $n.EdgesWithID}}

                {{- $gqlFieldName := print `{["` (singular $edge.Name | camel ) `IDs"]}` }}
                {{- $mode := `"multiple"` }}
                {{- if $edge.Unique}}
                {{- $gqlFieldName = print `"` (pascal $edge.Name | camel ) `ID"` }}
                {{- $mode = `undefined` }}
                {{- end}}
                <RA.Form.Item label="{{ $edge.Name }}"
                              name={{ $gqlFieldName }}rules={[{required: {{ not $edge.Optional }}}]}>
                    <RA.Select {...{{$edge.Name}}SelectProps} mode={ {{$mode}} }/>
                </RA.Form.Item>
                {{- end }}
            </RA.Form>
        </RA.Create>
    );
};

{{- end -}}

{{- end -}}