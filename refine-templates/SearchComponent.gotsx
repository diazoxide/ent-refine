{{- /* gotype: github.com/entkit/entkit/v2.Generator */ -}}

{{- define "src/search-component.tsx" -}}

{{- $.Extension.FileHeader | ER_replace "^" "//" }}

import {useState, useEffect} from "react";
import { Typography, Avatar, AutoComplete, Input } from "antd";
import { useList, useLink } from "@refinedev/core";
import * as Interfaces from "./typedefs"
import debounce from "lodash/debounce";
import { FileImageOutlined, SearchOutlined } from "@ant-design/icons";

interface IOptionGroup {
    value: string;
    label: string | React.ReactNode;
}

interface IOptions {
    label: string | React.ReactNode;
    options: IOptionGroup[];
}

const { Text } = Typography;

export const SearchComponent: React.FC = () => {
    const [options, setOptions] = useState<IOptions[]>([]);
    const [value, setValue] = useState<string>("");
    const Link = useLink();

    const renderTitle = (title: string) => (
        <Typography.Title>
            <Typography.Text style={
                { fontSize: "16px" }
            }>{title}</Typography.Text>
            {{/*<Link to={`/${title.toLowerCase()}`}>More</Link>*/}}
        </Typography.Title>
    );

    const renderItem = (title: string, imageUrl: string|null, link: string) => ({
        value: title,
        key: link,
        label: (
            <Link key={title+link} to={link} style={
                { display: "flex", alignItems: "center" }
            }>
                { imageUrl ? <Avatar size={48} src={imageUrl} style={
                    { minWidth: "48px" }
                } /> : <FileImageOutlined style={ {fontSize: '48px'} } />}
                <Text style={
                    { marginLeft: "16px" }
                }>{title}</Text>
            </Link>
        ),
    });

    {{- range $n := $.Graph.Nodes }}

    {{- $titleField := (ER_titleField $n) }}
    {{- $mainImageField := (ER_mainImageField $n) -}}

    const { refetch: refetch{{ $n.Name }} } = useList<Interfaces.{{ ER_prepareName $n.Name }}Interface>({
        resource: "{{ $n.Name | kebabcase }}",
        metaData: {
            fields: [
                "{{$n.ID.Name}}",
                "{{camel $titleField.Name}}",
                {{- if not (empty $mainImageField)}}
                "{{camel $mainImageField.Name}}",
                {{- end }}
            ],
            searchQuery: value,
        },
        queryOptions: {
            enabled: false,
            onSuccess: (data) => {
                const storeOptionGroup = data.data.map((item) =>
                    renderItem(
                        String(item.{{ default "id" $titleField.Name }}),
                        {{- if not (empty $mainImageField) }}
                        `${item.{{camel $mainImageField.Name}}}`,
                        {{- else }}
                        null,
                        {{- end }}
                        {{- $routePattern := ER_nodeActionRoutePattern $n "show" | trimPrefix "/" }}
                        window.environment.appPath + "{{$routePattern}}".replace(":id", String(item.{{ $n.ID.Name | camel }})),
                    ),
                );
                if (storeOptionGroup.length > 0) {
                    setOptions((prevOptions) => [
                        ...prevOptions,
                        {
                            label: renderTitle("{{$n.Name}}"),
                            options: storeOptionGroup,
                        },
                    ]);
                }
            },
        },
    });
    {{- end }}

    useEffect(() => {
        setOptions([]);
        if(value.length < 3){
            return
        }
        {{- range $n := $.Graph.Nodes }}
        refetch{{$n.Name}}();
        {{- end }}
    }, [value]);

    return (
        <AutoComplete
            style={
                {
                    width: "100%",
                    maxWidth: "550px",
                }
            }
            options={options}
            filterOption={false}
            onSearch={debounce(
                (value: string) => setValue(value),
                300,
            )}
        >
            <Input
                size="large"
                placeholder="Search"
                suffix={<SearchOutlined/>}
            />
        </AutoComplete>
    )
}

{{- end -}}