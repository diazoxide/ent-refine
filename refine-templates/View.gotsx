{{- /* gotype: github.com/entkit/entkit.UI */ -}}

{{- define "src/view.tsx" -}}
import React from "react";
import * as RA from "@refinedev/antd";
import * as Antd from "antd";
import * as AntdIcons from "@ant-design/icons";
import { useLink } from "@refinedev/core";
import * as Show from "./show";
import * as Type  from "./typedefs";
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';
import CodeEditor from '@uiw/react-textarea-code-editor';

export type ViewProps<T> = Omit<React.HTMLProps<HTMLElement>, "value"> & {
    value: T | undefined
}

// region Date
export const {{$.Extension.Prefix}}DateViewOnShow: React.FC<ViewProps<Date>> = ({value}) => {
    return value ? <RA.DateField format="LLL" value={ value }/> : <RA.TextField value="Never"/>
}
export const {{$.Extension.Prefix}}DateViewOnList: React.FC<ViewProps<Date>> = {{$.Extension.Prefix}}DateViewOnShow
export const {{$.Extension.Prefix}}DateViewOnForm: React.FC = (props) => {
    return <Antd.DatePicker {...props} showTime={true} />
}
// endregion Date

// region Boolean
export const {{$.Extension.Prefix}}BooleanViewOnShow: React.FC<ViewProps<Type.{{$.Extension.Prefix}}Boolean>> = ({value}) => {
    return <RA.TextField value={ value ? "Yes" : "No"}/>
}
export const {{$.Extension.Prefix}}BooleanViewOnList = {{$.Extension.Prefix}}BooleanViewOnShow
export const {{$.Extension.Prefix}}BooleanViewOnForm: React.FC = (props)=>{
    return <Antd.Radio.Group {...props} >
        <Antd.Radio value={true}>Yes</Antd.Radio>
        <Antd.Radio value={false}>No</Antd.Radio>
    </Antd.Radio.Group>
}
// endregion Boolean

// region String
export const {{$.Extension.Prefix}}StringViewOnShow: React.FC<ViewProps<Type.{{$.Extension.Prefix}}String>> = ({value}) => {
    return <Antd.Typography.Text copyable={true}>{ value }</Antd.Typography.Text>
}
export const {{$.Extension.Prefix}}StringViewOnList: React.FC<ViewProps<Type.{{$.Extension.Prefix}}String>> = ({value}) => {
    return <Antd.Tooltip title={value}>
        <RA.TextField value={value} ellipsis={true} style={ {width: '100px'} }/>
    </Antd.Tooltip>
}
export const {{$.Extension.Prefix}}StringViewOnForm: React.FC = (props) => {
    return <Antd.Input {...props} />
}
// endregion String

// region Number
export const {{$.Extension.Prefix}}NumberViewOnShow: React.FC<ViewProps<Type.{{$.Extension.Prefix}}Number>> = ({value, ...props}) => {
    return <{{$.Extension.Prefix}}StringViewOnShow value={String(value)} {...props} />
}
export const {{$.Extension.Prefix}}NumberViewOnList: React.FC<ViewProps<Type.{{$.Extension.Prefix}}Number>> = ({value, ...props}) => {
    return <{{$.Extension.Prefix}}NumberViewOnShow value={value} {...props} />
}
export const {{$.Extension.Prefix}}NumberViewOnForm: React.FC = (props) => {
    return <Antd.InputNumber {...props} />
}
// endregion Number

// region String List
export const {{$.Extension.Prefix}}StringListViewOnShow: React.FC<ViewProps<Type.{{$.Extension.Prefix}}StringList>> = ({value}) => {
    return <>{ value?.map( (v, i) => <{{$.Extension.Prefix}}StringViewOnShow key={i} value={ String(i+1) + '. ' + v}/> ) }</>;
}
export const {{$.Extension.Prefix}}StringListViewOnList: React.FC<ViewProps<Type.{{$.Extension.Prefix}}StringList>> = ({value}) => {
    return <Antd.Typography.Text>{ String( value?.length || 0 )+" items" }</Antd.Typography.Text>
}
export const {{$.Extension.Prefix}}StringListViewOnForm: React.FC = (props) => {
    return <Antd.Select {...props}  mode="tags" />
}
// endregion

// region Image
export const {{$.Extension.Prefix}}ImageViewOnShow: React.FC<ViewProps<Type.{{$.Extension.Prefix}}Image>> = ({value}) => {
    return <Antd.Image style={ {width: '100%', maxWidth: '256px' } } src={value}/>
}
export const {{$.Extension.Prefix}}ImageViewOnList: React.FC<ViewProps<Type.{{$.Extension.Prefix}}Image>> = ({value}) => {
    return <Antd.Image width={48} src={value}/>
}
export const {{$.Extension.Prefix}}ImageViewOnForm: React.FC = {{$.Extension.Prefix}}StringViewOnForm
// endregion Image

// region UUID
export const {{$.Extension.Prefix}}UUIDViewOnShow: React.FC<ViewProps<Type.{{$.Extension.Prefix}}UUID>> = {{$.Extension.Prefix}}StringViewOnShow
export const {{$.Extension.Prefix}}UUIDViewOnList: React.FC<ViewProps<Type.{{$.Extension.Prefix}}UUID>> = {{$.Extension.Prefix}}StringViewOnList
export const {{$.Extension.Prefix}}UUIDViewOnForm: React.FC = {{$.Extension.Prefix}}StringListViewOnForm
// endregion UUID

// region Code
export const {{$.Extension.Prefix}}CodeViewOnForm: React.FC<any> = (props) => {
    return <CodeEditor
        {...props}
        language={props.Language || 'js'}
        padding={15}
        style={ {
            overflow: 'auto',
            maxHeight: "80vh",
            minHeight: "400px",
            fontSize: 12,
            backgroundColor: "#222",
            fontFamily: 'ui-monospace,SFMono-Regular,SF Mono,Consolas,Liberation Mono,Menlo,monospace',
        } }
    />
}
export const {{$.Extension.Prefix}}CodeViewOnShow: React.FC<ViewProps<Type.{{$.Extension.Prefix}}Code>> = ({value}) => {
    return <{{$.Extension.Prefix}}CodeViewOnForm value={value} readOnly={true}/>
}
export const {{$.Extension.Prefix}}CodeViewOnList: React.FC<ViewProps<Type.{{$.Extension.Prefix}}Code>> = ({value}) => {
    return <RA.TextField value={value} code={true} ellipsis={true} style={ {width: '100px'} }/>
}
// endregion Code

// region Rich Text
export const {{$.Extension.Prefix}}RichTextViewOnShow: React.FC<ViewProps<Type.{{$.Extension.Prefix}}RichText>> = ({value})=>{
    return <div dangerouslySetInnerHTML={ {__html: value || ""} }></div>
}
export const {{$.Extension.Prefix}}RichTextViewOnList: React.FC<ViewProps<Type.{{$.Extension.Prefix}}RichText>> = {{$.Extension.Prefix}}StringViewOnList
export const {{$.Extension.Prefix}}RichTextViewOnForm: React.FC = (props) => <ReactQuill {...props} theme="snow"/>
// endregion Rich Text

// region URL
export const {{$.Extension.Prefix}}URLViewOnShow: React.FC<ViewProps<Type.{{$.Extension.Prefix}}URL>> = ({value}) => {
    return <Antd.Button href={ value } target="_blank" icon={<AntdIcons.LinkOutlined/>}>
        <RA.TextField value={value} ellipsis={true} style={ {width: '100%', maxWidth: "350px"} } type={"secondary"} />
    </Antd.Button>
}
export const {{$.Extension.Prefix}}URLViewOnList: React.FC<ViewProps<Type.{{$.Extension.Prefix}}URL>> = ({value}) => {
    return <Antd.Button type="primary" href={ value } target="_blank" icon={<AntdIcons.LinkOutlined/>}>Open</Antd.Button>
}
export const {{$.Extension.Prefix}}URLViewOnForm: React.FC = {{$.Extension.Prefix}}StringViewOnForm
// endregion URL

// region Enums
{{ $enums := list }}
{{- range $n := $.Graph.Nodes }}
{{- range $f := $n.Fields }}

{{- if $f.IsEnum }}
{{- if not (has $f.Type.String $enums) }}
{{- $enums = append $enums $f.Type.String }}
export const {{ ER_fieldTSType $f }}ViewOnShow = {{$.Extension.Prefix}}StringViewOnShow
export const {{ ER_fieldTSType $f }}ViewOnList = {{$.Extension.Prefix}}StringViewOnList
export const {{ ER_fieldTSType $f }}ViewOnForm: React.FC = (props)=>{
    return  <Antd.Select
        {...props}
        options={[
            {{- range $v := $f.EnumValues }}
            {
                value: "{{ $v }}",
                label: "{{ ER_label $v }}",
            },
            {{- end }}
        ]}
    />
}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
// endregion Enums

// region Entity Badges
{{- range $n := $.Graph.Nodes }}

export const {{ $n.Name }}Badge: React.FC<Partial<Type.{{ ER_prepareName $n.Name }}Interface>> = (props) => {
    const Link = useLink();
    {{- $titleField := (ER_titleField $n) }}
    {{- $mainImageField := (ER_mainImageField $n) }}
    return <Antd.Popover
        overlayInnerStyle={ {width: "50vw", height: "40vh", maxHeight:"400px", maxWidth:"500px", overflow: "auto"} }
        content={
            <Show.{{$n.Name}}Show
                breadcrumb={false}
                title={props.{{$titleField.Name | camel }} }
                id={ props.{{ $n.ID.Name | camel }} }
                withEdges={false}
                headerButtons={[]}
            />
        }
    >
        <Link to={ "/{{ $n.Name | kebabcase}}/show/"+ props.{{ $n.ID.Name | camel }}}>
            {{- if not ( empty $mainImageField ) }}
            {{- $mainImageFieldName := $mainImageField.Name | camel }}
            { props.{{ $mainImageFieldName }} ? <Antd.Image width={48} preview={false} src={props.{{ $mainImageFieldName }} }/> : null }
            {{- else }}
            { props.{{ $titleField.Name | camel }} }
            {{- end }}
        </Link>
    </Antd.Popover>
}

{{- end }}

// endregion

{{- end }}