{{- /* gotype: github.com/entkit/entkit/v2.Generator */ -}}

{{- define "partial:imports" -}}

{{- $.Extension.FileHeader | ER_replace "^" "//" }}

import {useState} from "react";
import * as RA from "@refinedev/antd";
import * as Antd from "antd";
import * as Interfaces from "./typedefs";
import {Cursors} from "./data-provider";
import dayjs from "dayjs";
import CodeEditor from '@uiw/react-textarea-code-editor';
import * as View from "./view";
import * as Action from "./action";
import * as Custom from "./custom";
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';
{{- end -}}
{{- define "partial:footer" -}}
{{- end -}}

{{- define "partial:selectProps" }}
{{- /*gotype: entgo.io/ent/entc/gen.Type*/ -}}
{{- range $ed := .EdgesWithID }}
{{- $titleField := ER_titleField $ed.Type}}
const [ {{$ed.Name}}Cursors, set{{pascal $ed.Name}}Cursors] = useState<Cursors>({})

const { selectProps: {{$ed.Name}}SelectProps } = RA.useSelect<Interfaces.{{ER_prepareName $ed.Type.Name}}Interface>({
    resource: "{{ $ed.Type.Name }}",
    optionLabel: "{{$titleField.Name}}",
    optionValue: "id",
    metaData:{
        cursors: {{$ed.Name}}Cursors,
        fields: ["{{ $.ID.Name }}", "{{$titleField.Name}}"]
    },
    onSearch: (value: string) => [
        {
            field: "{{$titleField.Name}}",
            {{- $operator := "contains" }}
            operator: "{{$operator}}",
            value,
        },
    ],
});
{{- end}}
{{- end -}}


{{- define "partial:fieldInput" -}}
{{- /* gotype: entgo.io/ent/entc/gen.Field */ -}}
{{- $fAnts := ER_fieldConfig .}}
<Antd.Form.Item
    name="{{ camel .Name }}"
    label="{{ .Name | ER_label }}"
    rules={[{required: {{ and (not .Optional) (not .Default) }}}]}
    {{- if .IsTime }}
    getValueProps={(value) => ({
        value: value ? dayjs(value) : "",
    })}
    {{- end }}
>
    {{- $viewName := ( print "View." (ER_fieldTSType .) "ViewOnForm" ) }}
    {{- if not (isNil $fAnts.ViewOnForm) }}
    {{ $viewName = print "Custom." (indirect $fAnts.ViewOnForm) }}
    {{- end}}
     <{{$viewName}}/>
</Antd.Form.Item>
{{- end -}}

{{- define "partial:edgeInputs" -}}
{{- range $e := .EdgesWithID }}
{{- $eAnts := ER_edgeConfig $e }}
{{- if not $eAnts.HideOnForm }}
{{- $gqlFieldName := print `{["` (singular $e.Name | camel) `IDs"]}` }}
{{- $mode := `"multiple"` }}
{{- if $e.Unique}}
{{- $gqlFieldName = print `"` ($e.Name | camel ) `ID"` }}
{{- $mode = `undefined` }}
{{- end}}
<Antd.Form.Item
    label="{{ $e.Name | ER_label }}"
    name={{ $gqlFieldName }}
    rules={[{required: {{ not $e.Optional }}}]}>
    <Antd.Select {...{{$e.Name}}SelectProps} mode={ {{$mode}} }/>
</Antd.Form.Item>
{{- end }}
{{- end }}
{{- end }}

{{- define "src/edit.tsx" -}}

{{- template "partial:imports" . }}

{{- range $n := $.Graph.Nodes}}
{{- $ants := ER_nodeConfig $n }}

export const {{$n.Name}}Edit: React.FC = () => {
    const { formProps, saveButtonProps, queryResult } = RA.useForm<Interfaces.{{ER_prepareName $n.Name}}Interface>(
        {
            redirect: false,
            metaData: {
                fields: [
                    {{- $allFields := append $n.Fields $n.ID}}
                    {{- range $f := $allFields }}
                    {{- $fAnts := ER_fieldConfig $f}}
                    {{- if not (isSkipMode $f.Annotations.EntGQL.Skip "mutation_update_input" ) }}
                    {{- if and (not $fAnts.HideOnForm) (not $fAnts.HideOnUpdate) }}
                    "{{ camel $f.Name}}",
                    {{- end }}
                    {{- end }}
                    {{- end }}
                    {{- range $e := $n.EdgesWithID}}
                    {{- $eAnts := ER_edgeConfig $e }}
                    {{- if and (not $eAnts.HideOnForm) (not $eAnts.HideOnUpdate) }}
                    {{- if $e.Unique}}
                    {
                        "{{ camel $e.Name }}": [ "id" ]
                    },
                    {{- else }}
                    {
                        "{{ camel $e.Name }}": [
                            {
                                edges: [
                                    {
                                        node: [ "id" ],
                                    }
                                ]
                            }
                        ]
                    },
                    {{- end }}
                    {{- end }}
                    {{- end }}
                ],
            }
        }
    );

    {{- (include "partial:selectProps" $n) | nindent 4 }}

    const id = queryResult?.data?.data.id;
    return (
        <RA.Edit
            saveButtonProps={saveButtonProps}
            headerButtons={() => (
                <>
                    {{- $actions := $ants.Actions }}
                    {{- range $a := $actions }}
                    {{ if has "edit" $a.DisplayOn }}
                    <Action.{{ ( print $n.Name "-" (indirect $a.Name) "-Action") | pascal }} recordItemIDs={ id ? [id] : [] }/>
                    {{- end }}
                    {{- end }}
                </>
            )}
        >
            <Antd.Form {...formProps} layout="vertical">
                {{- range $f := $n.Fields }}
                {{- $fAnts := ER_fieldConfig $f }}
                {{- if not (isSkipMode $f.Annotations.EntGQL.Skip "mutation_update_input" ) }}
                {{- if and (not $fAnts.HideOnForm) ($fAnts.HideOnUpdate)}}
                {{ (include "partial:fieldInput" $f) | nindent 16 }}
                {{- end }}
                {{- end }}
                {{- end }}

                {{- (include "partial:edgeInputs" $n) | nindent 16 }}
            </Antd.Form>
        </RA.Edit>
    );
};

{{- end -}}
{{ template "partial:footer" . }}
{{- end -}}


{{- define "src/create.tsx" -}}
{{- template "partial:imports" .}}

{{- range $n := $.Graph.Nodes }}
{{- $ants := ER_nodeConfig $n }}
export const {{$n.Name}}Create: React.FC = () => {
    const {formProps, saveButtonProps, queryResult} = RA.useForm<Interfaces.{{ER_prepareName $n.Name}}Interface>();

    {{- (include "partial:selectProps" $n) | nindent 4 }}

    return (
        <RA.Create
            saveButtonProps={saveButtonProps}
            headerButtons={() => (
               <>
                   {{- $actions := $ants.Actions }}
                   {{- range $a := $actions }}
                   {{ if has "create" $a.DisplayOn }}
                   <Action.{{ ( print $n.Name "-" (indirect $a.Name) "-Action") | pascal }} recordItemIDs={ [] }/>
                   {{- end }}
                   {{- end }}
               </>
            )}
        >
            <Antd.Form {...formProps} layout="vertical">
                {{- range $f := $n.Fields }}
                {{- $fAnts := ER_fieldConfig $f }}
                {{- if not (isSkipMode $f.Annotations.EntGQL.Skip "mutation_create_input" ) }}
                {{- if not $fAnts.HideOnForm }}
                {{- if not $fAnts.HideOnCreate }}
                {{- (include "partial:fieldInput" $f) | nindent 16 }}
                {{- end }}
                {{- end }}
                {{- end }}
                {{- end }}

                {{- (include "partial:edgeInputs" $n) | nindent 16 }}
            </Antd.Form>
        </RA.Create>
    );
};
{{- end }}
{{ template "partial:footer" . }}
{{- end -}}

