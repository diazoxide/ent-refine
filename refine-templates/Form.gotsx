{{- /* gotype: github.com/diazoxide/entrefine.RefineGen */ -}}
{{- define "partial:imports" -}}
/* eslint no-use-before-define: 0 */
import {useState} from "react";
import * as RA from "@pankod/refine-antd";
import * as Interfaces from "./interfaces";
import {Cursors} from "./data-provider";
import dayjs from "dayjs";
import CodeEditor from '@uiw/react-textarea-code-editor';
import * as View from "./view";
import * as Custom from "./custom";
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';
{{- end -}}
{{- define "partial:footer" -}}
/* eslint no-use-before-define: 2 */
{{- end -}}

{{- define "partial:selectProps" }}
{{- range $ed := .EdgesWithID }}
const [ {{$ed.Name}}Cursors, set{{pascal $ed.Name}}Cursors] = useState<Cursors>({})
{{- $titleField := $ed.Type.ID }}
{{- range $f:=$ed.Type.Fields }}
{{- if $f.Annotations.REFINE.TitleField }}
{{- $titleField = $f }}
{{- end }}

{{- end}}
const { selectProps: {{$ed.Name}}SelectProps } = RA.useSelect<Interfaces.I{{$.Name}}>({
    resource: "{{ $ed.Type.Name }}",
    optionLabel: "{{$titleField.Name}}",
    optionValue: "id",
    metaData:{
        cursors: {{$ed.Name}}Cursors,
        fields: ["{{ $.ID.Name }}", "{{$titleField.Name}}"]
    },
    onSearch: (value) => [
        {
            field: "{{$titleField.Name}}",
            {{- $operator := "contains" }}
            operator: "{{$operator}}",
            value,
        },
    ],
});
{{- end}}
{{- end -}}

{{- define "partial:fieldInput" -}}
<RA.Form.Item
    name="{{ camel .Name }}"
    label="{{ .Name | ER_label }}"
    rules={[{required: {{ not .Optional }}}]}
    {{- if .IsTime }}
    getValueProps={(value) => ({
        value: value ? dayjs(value) : "",
    })}
    {{- end }}
>
    {{- $viewName := ( print "View." (ER_fieldTSType .) "ViewOnForm" ) }}
    {{- if not (empty .Annotations.REFINE.ViewOnForm) }}
    {{ $viewName = print "Custom." .Annotations.REFINE.ViewOnForm }}
    {{- end}}
     <{{$viewName}}/>
</RA.Form.Item>
{{- end -}}

{{- define "partial:edgeInputs" -}}
{{- range $e := .EdgesWithID }}
{{- if not $e.Annotations.REFINE.HideOnForm }}
{{- $gqlFieldName := print `{["` (singular $e.Name | camel) `IDs"]}` }}
{{- $mode := `"multiple"` }}
{{- if $e.Unique}}
{{- $gqlFieldName = print `"` ($e.Name | camel ) `ID"` }}
{{- $mode = `undefined` }}
{{- end}}
<RA.Form.Item
    label="{{ $e.Name | ER_label }}"
    name={{ $gqlFieldName }}
    rules={[{required: {{ not $e.Optional }}}]}>
    <RA.Select {...{{$e.Name}}SelectProps} mode={ {{$mode}} }/>
</RA.Form.Item>
{{- end }}
{{- end }}
{{- end }}

{{- define "edit.tsx" -}}

{{- template "partial:imports" . }}

{{- range $n := $.Graph.Nodes}}

export const {{$n.Name}}Edit: React.FC = () => {
    const { formProps, saveButtonProps, queryResult } = RA.useForm<Interfaces.I{{$n.Name}}>(
        {
            redirect: false,
            metaData: {
                fields: [
                    {{- range $f := $n.Fields}}
                    {{- if not $f.Annotations.REFINE.HideOnForm }}
                    {{- if not (isSkipMode $f.Annotations.EntGQL.Skip "mutation_create_input" ) }}
                    "{{ camel $f.Name}}",
                    {{- end }}
                    {{- end }}
                    {{- end }}
                    {{- range $e := $n.EdgesWithID}}
                    {{- if not $e.Annotations.REFINE.HideOnForm }}
                    {{- if not (isSkipMode $e.Annotations.EntGQL.Skip "mutation_create_input" ) }}
                    {{- if $e.Unique}}
                    {
                        "{{ camel $e.Name }}": [ "id" ]
                    },
                    {{- else }}
                    {
                        "{{ camel $e.Name }}": [
                            {
                                edges: [
                                    {
                                        node: [ "id" ],
                                    }
                                ]
                            }
                        ]
                    },
                    {{- end }}
                    {{- end }}
                    {{- end }}
                    {{- end }}
                ],
            }
        }
    );

    {{- (include "partial:selectProps" $n) | nindent 4 }}

    return (
        <RA.Edit saveButtonProps={saveButtonProps}>
            <RA.Form {...formProps} layout="vertical">
                {{- range $f := $n.Fields }}
                {{- if not $f.Annotations.REFINE.HideOnForm }}
                {{- if not (isSkipMode $f.Annotations.EntGQL.Skip "mutation_update_input" ) }}
                {{ (include "partial:fieldInput" $f) | nindent 16 }}
                {{- end }}
                {{- end }}
                {{- end }}

                {{- (include "partial:edgeInputs" $n) | nindent 16 }}
            </RA.Form>
        </RA.Edit>
    );
};

{{- end -}}
{{ template "partial:footer" . }}
{{- end -}}


{{- define "create.tsx" -}}
{{- template "partial:imports" .}}

{{- range $n := $.Graph.Nodes -}}
export const {{$n.Name}}Create: React.FC = () => {
    const {formProps, saveButtonProps, queryResult} = RA.useForm<Interfaces.I{{$n.Name}}>();

    {{- (include "partial:selectProps" $n) | nindent 4 }}

    return (
        <RA.Create saveButtonProps={saveButtonProps}>
            <RA.Form {...formProps} layout="vertical">
                {{- range $f := $n.Fields }}
                {{- if not (isSkipMode $f.Annotations.EntGQL.Skip "mutation_create_input" ) }}
                {{- (include "partial:fieldInput" $f) | nindent 16 }}
                {{- end }}
                {{- end }}

                {{- (include "partial:edgeInputs" $n) | nindent 16 }}
            </RA.Form>
        </RA.Create>
    );
};

{{- end -}}
{{ template "partial:footer" . }}
{{- end -}}

