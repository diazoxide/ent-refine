{{- /* gotype: github.com/entkit/entkit/v2.Generator */ -}}

{{- define "src/action.tsx" -}}

{{- $.Extension.FileHeader | ER_replace "^" "//" }}

{{- $prefix := $.Extension.Prefix }}

import React from "react";
import * as Antd from "antd";
import * as AntdIcons from "@ant-design/icons";
import {
    RefineButtonSingleProps,
    RefineButtonLinkingProps,
    RefineButtonCommonProps
} from "@refinedev/ui-types";
import {ButtonProps, Popconfirm} from "antd";
import {
    useCustomMutation,
    useNotification,
    useInvalidate,
    useLink,
} from "@refinedev/core";
import * as Custom from "./custom";
import * as Type from "./typedefs";
{{- if $.Extension.Auth.Enabled }}
import { usePermissions } from "@refinedev/core";
{{- end }}

{{- range $n := $.Graph.Nodes }}
{{- range $a := $n.Annotations.ENTKIT.Actions }}
{{- $cName := ( print $n.Name "-" $a.Name "-Action") | pascal }}
{{- $routePath := $n.Annotations.ENTKIT.Route }}
{{- if empty $routePath}}
{{ $routePath = $n.Name | kebabcase }}
{{- end }}

export type {{$cName}}Props = ButtonProps &
    RefineButtonCommonProps &
    RefineButtonSingleProps &
    RefineButtonLinkingProps & {
    recordItemIDs: Type.{{ ER_fieldTSType $n.ID }}[],
    onSuccess?: (data: any)=>void
}

export const {{ $cName }}: React.FC<{{$cName}}Props> = ({recordItemIDs, hideText, onSuccess, ...props}) => {
    {{- if $.Extension.Auth.Enabled }}
    const { data: permissions } = usePermissions<Record<string, string[]>>();
    const can = Boolean(permissions?.{{$n.Name | pascal }}?.includes("{{ $a.Scope | pascal }}"));
    {{- else }}
    const can = true;
    {{- end }}
    const additionalProps = {{ $a.Props | toJson }} || {};

    {{- $label := default $a.Name $a.Label }}

    {{- if not (empty $a.Route) }}
    const Link = useLink();
    {{- $pattern := print $routePath}}
    {{- if not (empty $a.Route.Path)}}
    {{- $pattern = print $pattern "/" $a.Route.Path}}
    {{- end}}

    return can ? <Link to={ window.environment.appPath + "{{ $pattern }}".replace(":id", String(recordItemIDs[0])) }>
        <Antd.Button icon={ <{{default "AntdIcons.FileOutlined" $a.Icon}}/> } {...additionalProps} {...props} >
            {hideText || "{{$label}}"}
        </Antd.Button>
    </Link> : null
    {{- end }}
    {{- if not (empty $a.Operation )}}

    {{- $standards := list "Edit" "Show" }}
    {{- $opName := $a.Operation.Name }}
    {{- if eq $a.Operation.Name "Delete" }}
    {{- $opName = print "delete-" ($n.Name | plural) | camel }}
    {{- end }}

    const  notification = useNotification();
    const { mutate, isLoading } = useCustomMutation();
    //const { mutate, isLoading } = useCustomMutation<Type.{{ ER_prepareName $n.Name }}Interface>();
    const invalidate = useInvalidate();

    return can ? <Popconfirm
        key="{{ $opName }}"
        okText="{{ $label }}"
        cancelText="Cancel"
        okType="primary"
        title="Are you sure?"
        okButtonProps={ { disabled: isLoading } }
        onConfirm={(): void => {
            mutate(
                {
                    method: "post",
                    url: "",
                    values: {},
                    metaData: {
                        operation: "{{ $opName }}",
                        variables: {
                            where: {
                                value: {
                                    idIn: recordItemIDs
                                },
                                type: "{{ $n.Name }}WhereInput",
                                required: true
                            },
                        },
                        fields: {{ $a.Operation.Fields | toJson }} || undefined,
                    },
                },
                {
                    onSuccess: (resp) => {
                        recordItemIDs.forEach((id: Type.{{ ER_fieldTSType $n.ID }})=>{
                            invalidate({
                                resource: "{{ $n.Name | kebabcase}}",
                                invalidates: ["resourceAll"],
                                id,
                            });
                        })
                        notification.open?.({
                            type: "success",
                            message: `{{ default "Successfully" $a.Operation.SuccessMessage }}`,
                        })
                        !onSuccess || onSuccess(resp);
                    },
                    onError: (error) => {
                        {{- $message := "" }}
                        {{- if empty $a.FailMessage}}
                        {{- $message = "error.message" }}
                        {{- else }}
                        {{- $message = print "`" $a.Operation.FailMessage "`"}}
                        {{- end }}
                        notification.open?.({
                            type: "error",
                            message: {{ $message }},
                        })
                    },
                },
            );
        }}
    >
        <Antd.Button icon={ <{{default "AntdIcons.FileOutlined" $a.Icon}}/> } {...additionalProps} {...props} >
            {hideText || "{{$label}}"}
        </Antd.Button>
    </Popconfirm> : null
    {{- end }}
}
{{- end }}
{{- end }}
{{- end }}