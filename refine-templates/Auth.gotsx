{{- /* gotype: github.com/entkit/entkit.UI */ -}}

{{- define "src/auth.tsx" -}}

{{- $keycloakEnabled := and $.Extension.Auth.Enabled $.Extension.Auth.Keycloak.Enabled}}

{{- if $keycloakEnabled -}}
import { keycloakBackendClientId } from "../environment";
import Keycloak from "keycloak-js";
{{- end }}

export function getPermissions(keycloak: Keycloak) {
    return new Promise((resolve, reject) => {
        {{- if $keycloakEnabled -}}
        keycloak.updateToken(30).then(() => {
            fetch(keycloak.authServerUrl + '/realms/' + keycloak.realm + '/protocol/openid-connect/token',
                {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Authorization': 'Bearer ' + keycloak.token,
                    },
                    body: `grant_type=urn:ietf:params:oauth:grant-type:uma-ticket&response_include_resource_name=true&response_mode=permissions&audience=${keycloakBackendClientId}`
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to get permissions');
                    }
                    return response.json();
                })
                .then(data=>{
                    const res: Record<string, string[]> = {}
                    data.forEach((p: { rsname: string, scopes: string[] })=>{
                        res[p.rsname.replace(/^{{ $.Extension.Prefix }}/, "")] = p.scopes.map(s=>s.replace(/^{{ $.Extension.Prefix }}/, ""));
                    })
                    return res
                })
                .then(data => resolve(data))
                .catch(error => reject(error));
        }).catch(error => {
            reject('Failed to update token:'+ error.message);
        });
        {{- else }}
        throw new Error("entkit_disabled_authorization")
        {{- end }}
    });
}

{{- end }}