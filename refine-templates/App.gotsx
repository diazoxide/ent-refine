{{- /* gotype: github.com/diazoxide/entrefine.RefineGen */ -}}
{{- define "src/app.tsx" -}}
import React from "react";

import {AuthBindings,Authenticated, Refine} from "@refinedev/core";
import {ErrorComponent, Layout, notificationProvider,} from "@refinedev/antd";

import "@refinedev/antd/dist/reset.css";
import {GraphQLClient} from "graphql-request";
import {Resources} from "./resources";
import dataProvider from "./data-provider";
{{/*import {Header} from "./components/header";*/}}

import {useKeycloak} from "@react-keycloak/web";
import {Login} from "./login";
import routerProvider, {
    NavigateToResource,
    CatchAllNavigate,
    UnsavedChangesNotifier,
} from "@refinedev/react-router-v6";
import { BrowserRouter, Routes, Route, Outlet } from "react-router-dom";
import {ResourceRoutes} from "./routes";
import {graphqlUrl} from "./definition";

const client = new GraphQLClient(graphqlUrl);

function App() {
    const { keycloak, initialized } = useKeycloak();

    if (!initialized) {
        return <div>Loading...</div>;
    }

    const authProvider: AuthBindings = {
        login: async () => {
            const urlSearchParams = new URLSearchParams(window.location.search);
            const { to } = Object.fromEntries(urlSearchParams.entries());
            await keycloak.login({
                redirectUri: to ? `${window.location.origin}${to}` : undefined,
            });
            return {
                success: false,
                error: new Error("Login failed"),
            };
        },
        logout: async () => {
            try {
                await keycloak.logout({
                    redirectUri: window.location.origin,
                });
                return {
                    success: true,
                    redirectTo: "/login",
                };
            } catch (error) {
                return {
                    success: false,
                    error: new Error("Logout failed"),
                };
            }
        },
        onError: async (error) => {
            console.error(error);
            return { error };
        },
        check: async () => {
            try {
                const { token } = keycloak;
                if (token) {
                    client.setHeaders({
                        Authorization: `Bearer ${token}`,
                    })
                    return {
                        authenticated: true,
                    };
                } else {
                    return {
                        authenticated: false,
                        logout: true,
                        redirectTo: "/login",
                        error: new Error("Token not found"),
                    };
                }
            } catch (error) {
                return {
                    authenticated: false,
                    logout: true,
                    redirectTo: "/login",
                    error: new Error("Token not found"),
                };
            }
        },
        getPermissions:  async ()=>null,
        getIdentity: async () => {
            if (keycloak?.tokenParsed) {
                return {
                    name: keycloak.tokenParsed.family_name,
                };
            }
            return null;
        },
    };
    return (
        <BrowserRouter>
            <Refine
                authProvider={authProvider}
                routerProvider={routerProvider}
                {{/*Header={Header}*/}}
                dataProvider={dataProvider(client)}
                Layout={Layout}
                notificationProvider={notificationProvider}
                catchAll={<ErrorComponent/>}
                resources={Resources}
            >
                <Routes>
                    <Route
                        element={
                            <Authenticated
                                fallback={<CatchAllNavigate to="/login" />}
                            >
                                <Layout>
                                    <Outlet />
                                </Layout>
                            </Authenticated>
                        }
                    >
                        {ResourceRoutes}
                    </Route>

                    <Route
                        element={
                            <Authenticated fallback={<Outlet />}>
                                <NavigateToResource resource="posts" />
                            </Authenticated>
                        }
                    >
                        <Route path="/login" element={<Login />} />
                    </Route>

                    <Route
                        element={
                            <Authenticated>
                                <Layout>
                                    <Outlet />
                                </Layout>
                            </Authenticated>
                        }
                    >
                        <Route path="*" element={<ErrorComponent />} />
                    </Route>
                </Routes>
                <UnsavedChangesNotifier />
            </Refine>
        </BrowserRouter>
    );
}

export default App;

{{- end -}}