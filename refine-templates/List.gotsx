{{- /* gotype: github.com/diazoxide/entrefine.RefineGen */ -}}
{{- define "list.tsx" -}}
/* eslint no-use-before-define: 0 */
import React, {useState} from "react";
import {useInvalidate} from "@pankod/refine-core";
import * as RA from "@pankod/refine-antd";
import * as Tables from "./tables";
import * as Type from "./interfaces";
import * as Action from "./action";

{{- range $n := $.Graph.Nodes }}
export type {{$n.Name}}ListProps = RA.ListProps & { tableProps?: Tables.{{$n.Name}}TableProps}
export const {{$n.Name}}List :React.FC<{{$n.Name}}ListProps> = ({tableProps, ...props} ) => {
    const [selectedRowKeys, setSelectedRowKeys] = useState<Type.{{$.Prefix}}ID[]>([]);
    const rowSelection = {selectedRowKeys, onChange: setSelectedRowKeys};
    const invalidate = useInvalidate();

    return <RA.List {...props} resource="{{$n.Name}}" headerButtons={({ defaultButtons }) => (
        <>
            {defaultButtons}
            {selectedRowKeys.length ? <>
                {{- range $a := $n.Annotations.REFINE.Actions }}
                {{- if and $a.OnList $a.Bulk }}
                {{- $aName:= ( print $n.Name "-" $a.Operation "-Action") | pascal}}
                <Action.{{ $aName }}
                    key="{{$aName}}"
                    recordItemIDs={ selectedRowKeys }
                    onSuccess={ ()=>{
                        invalidate({
                            resource: "{{ $n.Name }}",
                            invalidates: ["list"],
                        });
                        setSelectedRowKeys([]);
                    } }
                />
                {{- end }}
                {{- end }}
            </> : null }
        </>
    )}>
        <Tables.{{$n.Name}}Table {...tableProps} rowSelection={rowSelection}/>
    </RA.List>
};

{{- end -}}
/* eslint no-use-before-define: 2 */
{{- end -}}
