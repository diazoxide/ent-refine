{{- /* gotype: github.com/entkit/entkit.Generator */ -}}

{{- define "src/routes.tsx" -}}
import React from "react";
import * as List from "./list";
import * as Show from "./show";
import * as Create from "./create";
import * as Edit from "./edit";
import { Login } from "./login";
import { Header } from "./header";
import { Authenticated} from "@refinedev/core";
import { ErrorComponent, ThemedLayout } from "@refinedev/antd";
import { Route, Routes, Outlet } from "react-router-dom";
import { NavigateToResource, CatchAllNavigate } from "@refinedev/react-router-v6";
{{- if $.Extension.Auth.Enabled }}
import { usePermissions } from "@refinedev/core";
{{- end }}

{{- $indexNode := ER_indexNode $.Graph}}

export const RoutesBundle: React.FC = ()=>{
    return <Routes>
        <Route
            element={
                <Authenticated
                    fallback={<CatchAllNavigate to="/login" />}
                >
                    <ThemedLayout Header={Header}>
                        <Outlet />
                    </ThemedLayout>
                </Authenticated>
            }
        >

            {{- if not (empty $indexNode) }}
            <Route index element={<NavigateToResource resource="{{ $indexNode.Name | kebabcase }}" />}/>
            {{- end }}
            {{- range $n := $.Graph.Nodes}}
            {{- $routePath := $n.Annotations.ENTKIT.Route }}
            {{- if empty $routePath }}
            {{ $routePath = $n.Name | kebabcase }}
            {{- end }}
            <Route path="/{{ $routePath }}">
                {{- range $a := $n.Annotations.ENTKIT.Actions }}
                {{- if not (empty $a.Route) }}
                <Route
                    {{ if $a.Route.Index -}}
                    index
                    {{- end -}}
                    {{ if not (empty $a.Route.Path ) -}}
                    path="{{ $a.Route.Path }}"
                    {{- end -}}
                    {{- $element := replace $a.Route.Element "{name}" $n.Name}}
                    element={<{{$element}}/>}
                />
                {{- end }}
                {{- end }}
            </Route>
            {{- end}}
        </Route>

        <Route
            element={
                <Authenticated fallback={<Outlet />}>
                    <NavigateToResource resource="{{ $indexNode.Name | kebabcase }}" />
                </Authenticated>
            }
        >
            <Route path="/login" element={<Login />} />
        </Route>

        <Route
            element={
                <Authenticated>
                    <ThemedLayout>
                        <Outlet />
                    </ThemedLayout>
                </Authenticated>
            }
        >
            <Route path="*" element={<ErrorComponent />} />
        </Route>
    </Routes>
}
{{- end -}}